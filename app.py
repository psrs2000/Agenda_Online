import streamlit as st
import streamlit as st
import sqlite3
from datetime import datetime, timedelta
import pandas as pd
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import calendar
import time
import random
import hashlib
import threading
try:
    from google.oauth2.credentials import Credentials
    from google.auth.transport.requests import Request
    from googleapiclient.discovery import build
    print("‚úÖ Imports Google OK")
except ImportError as e:
    print(f"‚ùå Erro nos imports Google: {e}")


# Verificar se √© modo admin (vers√£o din√¢mica corrigida)
is_admin = False
try:
    # Primeiro, tentar obter a chave dos secrets
    try:
        admin_key = st.secrets.get("ADMIN_URL_KEY", "desenvolvimento")
    except:
        admin_key = "desenvolvimento"  # Fallback para desenvolvimento local
    
    # Verificar query params (m√©todo novo)
    query_params = st.query_params
    is_admin = query_params.get("admin") == admin_key
    
except:
    try:
        # M√©todo antigo (Streamlit Cloud mais antigo)
        try:
            admin_key = st.secrets.get("ADMIN_URL_KEY", "desenvolvimento")
        except:
            admin_key = "desenvolvimento"
        
        query_params = st.experimental_get_query_params()
        is_admin = query_params.get("admin", [None])[0] == admin_key
        
    except:
        # Fallback final
        is_admin = False

# Configura√ß√£o da p√°gina (AGORA PODE SER PRIMEIRO!)
if is_admin:
    st.set_page_config(
        page_title="Painel Administrativo",
        page_icon="üîê",
        layout="wide",
        initial_sidebar_state="expanded"
    )
else:
    st.set_page_config(
        page_title="Agendamento Online",
        page_icon="üíÜ‚Äç‚ôÄÔ∏è",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

# CSS UNIFICADO
st.markdown("""
<style>
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1400px;
    }
    
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    .stApp {
        background: #f8f9fa;
        min-height: 100vh;
    }
    
    .admin-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .admin-header h1 {
        color: #1f2937;
        font-size: 2rem;
        margin: 0;
        font-weight: 700;
    }
    
    .admin-header .badge {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 14px;
        font-weight: 600;
    }
    
    .main-header {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        text-align: center;
        border: 1px solid #e9ecef;
    }
    
    .main-header h1 {
        color: #1f2937;
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }
    
    .main-header p {
        color: #6b7280;
        font-size: 1.2rem;
        margin: 0;
    }
    
    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea, #764ba2);
    }
    
    .stat-card.success::before {
        background: linear-gradient(90deg, #10b981, #059669);
    }
    
    .stat-card.warning::before {
        background: linear-gradient(90deg, #f59e0b, #d97706);
    }
    
    .stat-card.danger::before {
        background: linear-gradient(90deg, #ef4444, #dc2626);
    }
    
    .stat-number {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
    }
    
    .stat-label {
        color: #6b7280;
        font-size: 1rem;
        font-weight: 500;
    }
    
    .main-card {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #e9ecef;
    }
    
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f1f3f5;
    }
    
    .card-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1f2937;
        margin: 0;
    }
    
    .stTextInput > div > div > input,
    .stSelectbox > div > div > select,
    .stDateInput > div > div > input {
        border: 2px solid #e9ecef !important;
        border-radius: 8px !important;
        padding: 12px 16px !important;
        font-size: 16px !important;
        background: #f8f9fa !important;
        transition: all 0.3s ease !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stSelectbox > div > div > select:focus,
    .stDateInput > div > div > input:focus {
        border-color: #667eea !important;
        background: white !important;
        box-shadow: 0px 0px 0px 3px rgba(102,126,234,0.1) !important;
    }
    
    .stTextInput > label,
    .stSelectbox > label,
    .stDateInput > label {
        font-weight: 600 !important;
        color: #374151 !important;
        font-size: 16px !important;
        margin-bottom: 8px !important;
    }
    
    .stButton > button {
        border-radius: 8px !important;
        padding: 12px 24px !important;
        font-size: 16px !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
        border: 2px solid transparent !important;
    }
    
    .stButton > button[kind="primary"] {
        background: linear-gradient(135deg, #667eea, #764ba2) !important;
        color: white !important;
        box-shadow: 0px 4px 12px rgba(102,126,234,0.3) !important;
    }
    
    .stButton > button[kind="primary"]:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0px 6px 16px rgba(102,126,234,0.4) !important;
    }
    
    .alert {
        padding: 16px 20px;
        border-radius: 8px;
        margin: 16px 0;
        font-weight: 500;
        border-left: 4px solid;
    }
    
    .alert-success {
        background: #ecfdf5;
        color: #047857;
        border-left-color: #10b981;
    }
    
    .alert-error {
        background: #fef2f2;
        color: #b91c1c;
        border-left-color: #ef4444;
    }
    
    .alert-warning {
        background: #fffbeb;
        color: #b45309;
        border-left-color: #f59e0b;
    }
    
    .alert-info {
        background: #eff6ff;
        color: #1d4ed8;
        border-left-color: #3b82f6;
    }
    
    .appointment-summary {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        padding: 24px;
        border-radius: 15px;
        margin: 20px 0;
        border-left: 5px solid #667eea;
        box-shadow: 0px 5px 15px rgba(0,0,0,0.1);
    }
    
    .appointment-summary h3 {
        color: #667eea;
        margin-bottom: 16px;
        font-size: 1.3rem;
    }
    
    .summary-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding: 8px 0;
        border-bottom: 1px solid #dee2e6;
    }
    
    .summary-item:last-child {
        border-bottom: none;
    }
    
    @media (max-width: 768px) {
        .main .block-container {
            padding: 1rem;
        }
        
        .admin-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .stats-container {
            grid-template-columns: 1fr;
        }
        
        .main-card {
            padding: 1.5rem;
        }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .fade-in {
        animation: fadeIn 0.5s ease-out;
    }
</style>
""", unsafe_allow_html=True)

# Configura√ß√µes
DB = "agenda.db"
# Configura√ß√µes
try:
    SENHA_CORRETA = st.secrets.get("ADMIN_PASSWORD", "admin123")
except:
    SENHA_CORRETA = "admin123"  # Para desenvolvimento local

# Fun√ß√µes do banco
def conectar():
    return sqlite3.connect(DB)

def init_config():
    conn = conectar()
    c = conn.cursor()
    
    c.execute('''
        CREATE TABLE IF NOT EXISTS agendamentos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome_cliente TEXT,
            telefone TEXT,
            data TEXT,
            horario TEXT
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS dias_uteis (
            dia TEXT PRIMARY KEY
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS bloqueios (
            data TEXT PRIMARY KEY
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS configuracoes (
            chave TEXT PRIMARY KEY,
            valor TEXT
        )
    ''')

    try:
        c.execute("SELECT email FROM agendamentos LIMIT 1")
    except sqlite3.OperationalError:
        c.execute("ALTER TABLE agendamentos ADD COLUMN email TEXT DEFAULT ''")

    try:
        c.execute("SELECT status FROM agendamentos LIMIT 1")
    except sqlite3.OperationalError:
        c.execute("ALTER TABLE agendamentos ADD COLUMN status TEXT DEFAULT 'pendente'")

    c.execute('''
        CREATE TABLE IF NOT EXISTS bloqueios_horarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data TEXT,
            horario TEXT,
            UNIQUE(data, horario)
        )
    ''')

    conn.commit()
    conn.close()

def obter_configuracao(chave, padrao=None):
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT valor FROM configuracoes WHERE chave=?", (chave,))
        resultado = c.fetchone()
        if resultado:
            valor = resultado[0]
            if valor == "True":
                return True
            elif valor == "False":
                return False
            try:
                return int(valor)
            except ValueError:
                try:
                    return float(valor)
                except ValueError:
                    return valor
        return padrao
    except:
        return padrao
    finally:
        conn.close()

def salvar_configuracao(chave, valor):
    conn = conectar()
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO configuracoes (chave, valor) VALUES (?, ?)", (chave, str(valor)))
    conn.commit()
    conn.close()

def horario_disponivel(data, horario):
    conn = conectar()
    c = conn.cursor()
    
    # Verificar se h√° agendamento neste hor√°rio
    c.execute("SELECT * FROM agendamentos WHERE data=? AND horario=? AND status != 'cancelado'", (data, horario))
    if c.fetchone():
        conn.close()
        return False
    
    # Verificar se o dia inteiro est√° bloqueado
    try:
        c.execute("SELECT * FROM bloqueios WHERE data=?", (data,))
        if c.fetchone():
            conn.close()
            return False
    except:
        pass
    
    # NOVO: Verificar se a data est√° em algum per√≠odo bloqueado
    if data_em_periodo_bloqueado(data):
        conn.close()
        return False    
    
    # Verificar se o hor√°rio espec√≠fico est√° bloqueado
    try:
        c.execute("SELECT * FROM bloqueios_horarios WHERE data=? AND horario=?", (data, horario))
        if c.fetchone():
            conn.close()
            return False
    except:
        pass
    
    # Verificar bloqueios permanentes
    if horario_bloqueado_permanente(data, horario):
        conn.close()
        return False
    
    # NOVO: Verificar bloqueios semanais
    if horario_bloqueado_semanal(data, horario):
        conn.close()
        return False
    
    conn.close()
    return True

def adicionar_agendamento(nome, telefone, email, data, horario):
    """Adiciona agendamento com integra√ß√£o Google Calendar"""
    conn = conectar()
    c = conn.cursor()
    
    confirmacao_automatica = obter_configuracao("confirmacao_automatica", False)
    status_inicial = "confirmado" if confirmacao_automatica else "pendente"
    
    agendamento_id = None
    try:
        c.execute("INSERT INTO agendamentos (nome_cliente, telefone, email, data, horario, status) VALUES (?, ?, ?, ?, ?, ?)",
                  (nome, telefone, email, data, horario, status_inicial))
        agendamento_id = c.lastrowid
        conn.commit()
    except sqlite3.OperationalError:
        c.execute("INSERT INTO agendamentos (nome_cliente, telefone, data, horario) VALUES (?, ?, ?, ?)",
                  (nome, telefone, data, horario))
        agendamento_id = c.lastrowid
        conn.commit()
    finally:
        conn.close()
    
    # NOVO: Integra√ß√£o com Google Calendar
    google_calendar_ativo = obter_configuracao("google_calendar_ativo", False)
    
    if google_calendar_ativo and status_inicial == "confirmado" and agendamento_id:
        try:
            criar_evento_google_calendar(agendamento_id, nome, telefone, email, data, horario)
        except Exception as e:
            print(f"‚ùå Erro na integra√ß√£o Google Calendar: {e}")
    
    # Envio de emails (c√≥digo original)
    envio_automatico = obter_configuracao("envio_automatico", False)
    enviar_confirmacao = obter_configuracao("enviar_confirmacao", True)
    
    if status_inicial == "confirmado" and email and agendamento_id and envio_automatico and enviar_confirmacao:
        try:
            enviar_email_confirmacao(agendamento_id, nome, email, data, horario)
        except Exception as e:
            print(f"‚ùå Erro ao enviar email de confirma√ß√£o autom√°tica: {e}")
    
    return status_inicial

def cancelar_agendamento(nome, telefone, data):
    """Cancela agendamento mudando status para 'cancelado' em vez de deletar"""
    conn = conectar()
    c = conn.cursor()
    
    # MUDAN√áA PRINCIPAL: Buscar TODOS os agendamentos do dia, n√£o s√≥ o primeiro
    agendamentos_do_dia = []
    
    try:
        # Tentar buscar com email e ID - TODOS OS AGENDAMENTOS DO DIA
        c.execute("SELECT id, email, horario FROM agendamentos WHERE nome_cliente=? AND telefone=? AND data=? AND status IN ('pendente', 'confirmado')", (nome, telefone, data))
        agendamentos_do_dia = c.fetchall()
    except sqlite3.OperationalError:
        # Se n√£o tem coluna email, buscar s√≥ ID e hor√°rio - TODOS OS AGENDAMENTOS DO DIA
        try:
            c.execute("SELECT id, horario FROM agendamentos WHERE nome_cliente=? AND telefone=? AND data=? AND status IN ('pendente', 'confirmado')", (nome, telefone, data))
            agendamentos_sem_email = c.fetchall()
            # Adicionar email vazio para manter formato
            agendamentos_do_dia = [(ag[0], '', ag[1]) for ag in agendamentos_sem_email]
        except:
            # Fallback para vers√µes muito antigas sem coluna status
            c.execute("SELECT id, horario FROM agendamentos WHERE nome_cliente=? AND telefone=? AND data=?", (nome, telefone, data))
            agendamentos_sem_email = c.fetchall()
            agendamentos_do_dia = [(ag[0], '', ag[1]) for ag in agendamentos_sem_email]
    
    # Verificar se existem agendamentos CANCEL√ÅVEIS
    try:
        c.execute("SELECT COUNT(*) FROM agendamentos WHERE nome_cliente=? AND telefone=? AND data=? AND status IN ('pendente', 'confirmado')", (nome, telefone, data))
        existe = c.fetchone()[0] > 0
    except sqlite3.OperationalError:
        # Fallback para vers√µes antigas sem coluna status
        c.execute("SELECT COUNT(*) FROM agendamentos WHERE nome_cliente=? AND telefone=? AND data=?", (nome, telefone, data))
        existe = c.fetchone()[0] > 0
    
    if existe and agendamentos_do_dia:
        # Cancelar TODOS os agendamentos do dia no sistema
        try:
            c.execute("UPDATE agendamentos SET status = 'cancelado' WHERE nome_cliente=? AND telefone=? AND data=?", 
                     (nome, telefone, data))
            conn.commit()
            conn.close()

            print(f"‚úÖ {len(agendamentos_do_dia)} agendamento(s) cancelado(s): {nome} - {data}")

            # NOVO: Integra√ß√£o com Google Calendar para M√öLTIPLOS eventos
            google_calendar_ativo = obter_configuracao("google_calendar_ativo", False)
            
            if google_calendar_ativo:
                eventos_deletados = 0
                for agendamento in agendamentos_do_dia:
                    agendamento_id = agendamento[0]
                    horario = agendamento[2]
                    
                    try:
                        sucesso = deletar_evento_google_calendar(agendamento_id)
                        if sucesso:
                            eventos_deletados += 1
                            print(f"‚úÖ Evento Google Calendar deletado: {horario}")
                        else:
                            print(f"‚ö†Ô∏è Falha ao deletar evento Google Calendar: {horario}")
                    except Exception as e:
                        print(f"‚ùå Erro ao deletar evento Google Calendar {horario}: {e}")
                
                print(f"üìÖ Google Calendar: {eventos_deletados}/{len(agendamentos_do_dia)} eventos deletados")
            
            # Enviar email de cancelamento (usando dados do primeiro agendamento)
            envio_automatico = obter_configuracao("envio_automatico", False)
            enviar_cancelamento = obter_configuracao("enviar_cancelamento", True)
            
            if envio_automatico and enviar_cancelamento and agendamentos_do_dia:
                primeiro_agendamento = agendamentos_do_dia[0]
                email_cliente = primeiro_agendamento[1] if len(primeiro_agendamento) > 1 else ""
                
                if email_cliente:
                    # Se m√∫ltiplos agendamentos, mencionar no email
                    if len(agendamentos_do_dia) > 1:
                        horarios_cancelados = ", ".join([ag[2] for ag in agendamentos_do_dia])
                        horario_para_email = f"Hor√°rios: {horarios_cancelados}"
                    else:
                        horario_para_email = agendamentos_do_dia[0][2]
                    
                    try:
                        sucesso = enviar_email_cancelamento(nome, email_cliente, data, horario_para_email, "cliente")
                        if sucesso:
                            print(f"‚úÖ Email de cancelamento enviado para {email_cliente}")
                        else:
                            print(f"‚ùå Falha ao enviar email de cancelamento para {email_cliente}")
                    except Exception as e:
                        print(f"‚ùå Erro ao enviar email de cancelamento: {e}")
            
            return True
            
        except sqlite3.OperationalError:
            # Se n√£o tem coluna status, criar ela e tentar novamente
            try:
                c.execute("ALTER TABLE agendamentos ADD COLUMN status TEXT DEFAULT 'pendente'")
                conn.commit()
                
                # Tentar novamente
                c.execute("UPDATE agendamentos SET status = 'cancelado' WHERE nome_cliente=? AND telefone=? AND data=?", 
                         (nome, telefone, data))
                conn.commit()
                conn.close()
                
                print(f"‚úÖ {len(agendamentos_do_dia)} agendamento(s) cancelado(s): {nome} - {data}")
                
                # Google Calendar e email (mesmo c√≥digo de cima)
                google_calendar_ativo = obter_configuracao("google_calendar_ativo", False)
                
                if google_calendar_ativo:
                    eventos_deletados = 0
                    for agendamento in agendamentos_do_dia:
                        agendamento_id = agendamento[0]
                        horario = agendamento[2]
                        
                        try:
                            sucesso = deletar_evento_google_calendar(agendamento_id)
                            if sucesso:
                                eventos_deletados += 1
                                print(f"‚úÖ Evento Google Calendar deletado: {horario}")
                        except Exception as e:
                            print(f"‚ùå Erro ao deletar evento Google Calendar {horario}: {e}")
                    
                    print(f"üìÖ Google Calendar: {eventos_deletados}/{len(agendamentos_do_dia)} eventos deletados")
                
                # Email de cancelamento
                envio_automatico = obter_configuracao("envio_automatico", False)
                enviar_cancelamento = obter_configuracao("enviar_cancelamento", True)
                
                if envio_automatico and enviar_cancelamento and agendamentos_do_dia:
                    primeiro_agendamento = agendamentos_do_dia[0]
                    email_cliente = primeiro_agendamento[1] if len(primeiro_agendamento) > 1 else ""
                    
                    if email_cliente:
                        if len(agendamentos_do_dia) > 1:
                            horarios_cancelados = ", ".join([ag[2] for ag in agendamentos_do_dia])
                            horario_para_email = f"Hor√°rios: {horarios_cancelados}"
                        else:
                            horario_para_email = agendamentos_do_dia[0][2]
                        
                        try:
                            sucesso = enviar_email_cancelamento(nome, email_cliente, data, horario_para_email, "cliente")
                            if sucesso:
                                print(f"‚úÖ Email de cancelamento enviado para {email_cliente}")
                        except Exception as e:
                            print(f"‚ùå Erro ao enviar email de cancelamento: {e}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå Erro ao atualizar status: {e}")
                conn.close()
                return False
        
    else:
        conn.close()
        return False

def obter_dias_uteis():
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT dia FROM dias_uteis")
        dias = [linha[0] for linha in c.fetchall()]
        if not dias:
            dias = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    except:
        dias = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    conn.close()
    return dias

def salvar_dias_uteis(dias):
    conn = conectar()
    c = conn.cursor()
    c.execute("DELETE FROM dias_uteis")
    for dia in dias:
        c.execute("INSERT INTO dias_uteis (dia) VALUES (?)", (dia,))
    conn.commit()
    conn.close()

def obter_datas_bloqueadas():
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT data FROM bloqueios")
        datas = [linha[0] for linha in c.fetchall()]
    except:
        datas = []
    conn.close()
    return datas

def adicionar_bloqueio(data):
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("INSERT INTO bloqueios (data) VALUES (?)", (data,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remover_bloqueio(data):
    conn = conectar()
    c = conn.cursor()
    c.execute("DELETE FROM bloqueios WHERE data=?", (data,))
    conn.commit()
    conn.close()

def obter_bloqueios():
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT data FROM bloqueios ORDER BY data")
        datas = [linha[0] for linha in c.fetchall()]
    except:
        datas = []
    conn.close()
    return datas

def buscar_agendamentos():
    conn = conectar()
    c = conn.cursor()
    
    try:
        c.execute("SELECT id, data, horario, nome_cliente, telefone, email, status FROM agendamentos ORDER BY data, horario")
        agendamentos = c.fetchall()
    except:
        try:
            c.execute("SELECT id, data, horario, nome_cliente, telefone FROM agendamentos ORDER BY data, horario")
            agendamentos_sem_extras = c.fetchall()
            agendamentos = [ag + ('', 'pendente') for ag in agendamentos_sem_extras]
        except:
            agendamentos = []
    
    conn.close()
    return agendamentos

def atualizar_status_agendamento(agendamento_id, novo_status):
    """Atualiza status do agendamento com integra√ß√£o Google Calendar"""
    conn = conectar()
    c = conn.cursor()
    
    # Buscar dados do agendamento antes de atualizar
    c.execute("SELECT nome_cliente, email, data, horario, telefone FROM agendamentos WHERE id = ?", (agendamento_id,))
    agendamento_dados = c.fetchone()
    
    # Atualizar status
    c.execute("UPDATE agendamentos SET status = ? WHERE id = ?", (novo_status, agendamento_id))
    conn.commit()
    conn.close()
    
    # NOVO: Integra√ß√£o com Google Calendar
    google_calendar_ativo = obter_configuracao("google_calendar_ativo", False)
    
    if google_calendar_ativo and agendamento_dados:
        nome_cliente = agendamento_dados[0]
        email = agendamento_dados[1] if len(agendamento_dados) > 1 else ""
        data = agendamento_dados[2] if len(agendamento_dados) > 2 else ""
        horario = agendamento_dados[3] if len(agendamento_dados) > 3 else ""
        telefone = agendamento_dados[4] if len(agendamento_dados) > 4 else ""
        
        try:
            if novo_status == 'confirmado':
                # Criar evento se n√£o existir
                event_id = obter_event_id_google(agendamento_id)
                if not event_id:
                    criar_evento_google_calendar(agendamento_id, nome_cliente, telefone, email, data, horario)
                
            elif novo_status == 'cancelado':
                # Deletar evento
                deletar_evento_google_calendar(agendamento_id)
                
            elif novo_status == 'atendido':
                # Atualizar evento
                atualizar_evento_google_calendar(agendamento_id, nome_cliente, novo_status)
                
        except Exception as e:
            print(f"‚ùå Erro na integra√ß√£o Google Calendar: {e}")
    
    # Envio de emails (c√≥digo original)
    envio_automatico = obter_configuracao("envio_automatico", False)
    enviar_confirmacao = obter_configuracao("enviar_confirmacao", True)
    
    if novo_status == 'confirmado' and agendamento_dados and len(agendamento_dados) >= 4 and envio_automatico and enviar_confirmacao:
        nome_cliente, email, data, horario = agendamento_dados[:4]
        if email:
            try:
                enviar_email_confirmacao(agendamento_id, nome_cliente, email, data, horario)
            except Exception as e:
                print(f"‚ùå Erro ao enviar email de confirma√ß√£o: {e}")
    
    # Email de cancelamento
    enviar_cancelamento = obter_configuracao("enviar_cancelamento", True)
    
    if novo_status == 'cancelado' and agendamento_dados and len(agendamento_dados) >= 4 and envio_automatico and enviar_cancelamento:
        nome_cliente, email, data, horario = agendamento_dados[:4]
        if email:
            try:
                enviar_email_cancelamento(nome_cliente, email, data, horario, "admin")
            except Exception as e:
                print(f"‚ùå Erro ao enviar email de cancelamento: {e}")

def deletar_agendamento(agendamento_id):
    conn = conectar()
    c = conn.cursor()
    c.execute("DELETE FROM agendamentos WHERE id=?", (agendamento_id,))
    conn.commit()
    conn.close()

def adicionar_bloqueio_horario(data, horario):
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("INSERT INTO bloqueios_horarios (data, horario) VALUES (?, ?)", (data, horario))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def remover_bloqueio_horario(data, horario):
    conn = conectar()
    c = conn.cursor()
    c.execute("DELETE FROM bloqueios_horarios WHERE data=? AND horario=?", (data, horario))
    conn.commit()
    conn.close()

def obter_bloqueios_horarios():
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT data, horario FROM bloqueios_horarios ORDER BY data, horario")
        bloqueios = c.fetchall()
    except:
        bloqueios = []
    conn.close()
    return bloqueios

def adicionar_bloqueio_permanente(horario_inicio, horario_fim, dias_semana, descricao):
    conn = conectar()
    c = conn.cursor()
    try:
        # Criar tabela se n√£o existir
        c.execute('''
            CREATE TABLE IF NOT EXISTS bloqueios_permanentes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                horario_inicio TEXT,
                horario_fim TEXT,
                dias_semana TEXT,
                descricao TEXT
            )
        ''')
        
        dias_str = ",".join(dias_semana)
        c.execute("INSERT INTO bloqueios_permanentes (horario_inicio, horario_fim, dias_semana, descricao) VALUES (?, ?, ?, ?)", 
                  (horario_inicio, horario_fim, dias_str, descricao))
        conn.commit()
        return True
    except Exception as e:
        print(f"Erro ao adicionar bloqueio permanente: {e}")
        return False
    finally:
        conn.close()

def obter_bloqueios_permanentes():
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT id, horario_inicio, horario_fim, dias_semana, descricao FROM bloqueios_permanentes ORDER BY horario_inicio")
        bloqueios = c.fetchall()
        return bloqueios
    except:
        return []
    finally:
        conn.close()

def remover_bloqueio_permanente(bloqueio_id):
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("DELETE FROM bloqueios_permanentes WHERE id=?", (bloqueio_id,))
        conn.commit()
        return True
    except:
        return False
    finally:
        conn.close()

def horario_bloqueado_permanente(data, horario):
    """Verifica se um hor√°rio est√° bloqueado permanentemente"""
    conn = conectar()
    c = conn.cursor()
    try:
        # Descobrir o dia da semana
        data_obj = datetime.strptime(data, "%Y-%m-%d")
        dia_semana = data_obj.strftime("%A")  # Monday, Tuesday, etc.
        
        # Buscar bloqueios permanentes
        c.execute("SELECT horario_inicio, horario_fim, dias_semana FROM bloqueios_permanentes")
        bloqueios = c.fetchall()
        
        for inicio, fim, dias in bloqueios:
            # Verificar se o dia est√° nos dias bloqueados
            if dia_semana in dias.split(","):
                # Verificar se o hor√°rio est√° no intervalo
                if inicio <= horario <= fim:
                    return True
        
        return False
    except:
        return False
    finally:
        conn.close()

def adicionar_bloqueio_semanal(dia_semana, horarios_bloqueados, descricao=""):
    """Adiciona bloqueio recorrente para um dia da semana espec√≠fico"""
    conn = conectar()
    c = conn.cursor()
    try:
        # Criar tabela se n√£o existir
        c.execute('''
            CREATE TABLE IF NOT EXISTS bloqueios_semanais (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                dia_semana TEXT,
                horarios TEXT,
                descricao TEXT,
                UNIQUE(dia_semana, horarios)
            )
        ''')
        
        horarios_str = ",".join(horarios_bloqueados)
        c.execute("INSERT INTO bloqueios_semanais (dia_semana, horarios, descricao) VALUES (?, ?, ?)", 
                  (dia_semana, horarios_str, descricao))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    except Exception as e:
        print(f"Erro ao adicionar bloqueio semanal: {e}")
        return False
    finally:
        conn.close()

def obter_bloqueios_semanais():
    """Obt√©m todos os bloqueios semanais"""
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT id, dia_semana, horarios, descricao FROM bloqueios_semanais ORDER BY dia_semana")
        bloqueios = c.fetchall()
        return bloqueios
    except:
        return []
    finally:
        conn.close()

def remover_bloqueio_semanal(bloqueio_id):
    """Remove um bloqueio semanal"""
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("DELETE FROM bloqueios_semanais WHERE id=?", (bloqueio_id,))
        conn.commit()
        return True
    except:
        return False
    finally:
        conn.close()

def horario_bloqueado_semanal(data, horario):
    """Verifica se um hor√°rio est√° bloqueado por regra semanal"""
    conn = conectar()
    c = conn.cursor()
    try:
        # Descobrir o dia da semana
        data_obj = datetime.strptime(data, "%Y-%m-%d")
        dia_semana = data_obj.strftime("%A")  # Monday, Tuesday, etc.
        
        # Buscar bloqueios semanais para este dia
        c.execute("SELECT horarios FROM bloqueios_semanais WHERE dia_semana=?", (dia_semana,))
        bloqueios = c.fetchall()
        
        for (horarios_str,) in bloqueios:
            horarios_bloqueados = horarios_str.split(",")
            if horario in horarios_bloqueados:
                return True
        
        return False
    except:
        return False
    finally:
        conn.close()

def enviar_email_confirmacao(agendamento_id, cliente_nome, cliente_email, data, horario):
    """Envia email de confirma√ß√£o autom√°tico"""
    
    if not obter_configuracao("envio_automatico", False):
        return False
    
    try:
        # Obter configura√ß√µes de email
        email_sistema = obter_configuracao("email_sistema", "")
        senha_email = obter_configuracao("senha_email", "")
        servidor_smtp = obter_configuracao("servidor_smtp", "smtp.gmail.com")
        porta_smtp = obter_configuracao("porta_smtp", 587)
        
        if not email_sistema or not senha_email:
            return False
        
        # Obter dados do profissional
        nome_profissional = obter_configuracao("nome_profissional", "Dr. Jo√£o Silva")
        especialidade = obter_configuracao("especialidade", "Cl√≠nico Geral")
        nome_clinica = obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas")
        telefone_contato = obter_configuracao("telefone_contato", "(11) 3333-4444")
        whatsapp = obter_configuracao("whatsapp", "(11) 99999-9999")
        
        # Endere√ßo completo
        endereco_rua = obter_configuracao("endereco_rua", "Rua das Flores, 123")
        endereco_bairro = obter_configuracao("endereco_bairro", "Centro")
        endereco_cidade = obter_configuracao("endereco_cidade", "S√£o Paulo - SP")
        endereco_completo = f"{endereco_rua}, {endereco_bairro}, {endereco_cidade}"
        
        instrucoes_chegada = obter_configuracao("instrucoes_chegada", "Favor chegar 10 minutos antes do hor√°rio agendado.")
        
        # Formatar data
        data_obj = datetime.strptime(data, "%Y-%m-%d")
        data_formatada = data_obj.strftime("%d/%m/%Y - %A")
        data_formatada = data_formatada.replace('Monday', 'Segunda-feira')\
            .replace('Tuesday', 'Ter√ßa-feira').replace('Wednesday', 'Quarta-feira')\
            .replace('Thursday', 'Quinta-feira').replace('Friday', 'Sexta-feira')\
            .replace('Saturday', 'S√°bado').replace('Sunday', 'Domingo')
        
        # Usar template personalizado ou padr√£o
        template = obter_configuracao("template_confirmacao", 
            "Ol√° {nome}!\n\nSeu agendamento foi confirmado:\nüìÖ Data: {data}\n‚è∞ Hor√°rio: {horario}\n\nAguardamos voc√™!")
        
        # Substituir vari√°veis no template
        corpo = template.format(
            nome=cliente_nome,
            data=data_formatada,
            horario=horario,
            local=nome_clinica,
            endereco=endereco_completo,
            profissional=nome_profissional,
            especialidade=especialidade
        )
        
        # Adicionar informa√ß√µes extras
        corpo += f"""

üìç Local: {nome_clinica}
üè† Endere√ßo: {endereco_completo}
üìû Telefone: {telefone_contato}
üí¨ WhatsApp: {whatsapp}

üìù Instru√ß√µes importantes:
{instrucoes_chegada}

Atenciosamente,
{nome_profissional} - {especialidade}
{nome_clinica}
"""
        
        # Criar mensagem
        msg = MIMEMultipart()
        msg['From'] = email_sistema
        msg['To'] = cliente_email
        msg['Subject'] = f"‚úÖ Agendamento Confirmado - {nome_profissional}"
        
        msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
        
        # Enviar email
        server = smtplib.SMTP(servidor_smtp, porta_smtp)
        server.starttls()
        server.login(email_sistema, senha_email)
        server.send_message(msg)
        server.quit()
        
        return True
        
    except Exception as e:
        print(f"Erro ao enviar email: {e}")
        return False

def enviar_email_cancelamento(cliente_nome, cliente_email, data, horario, cancelado_por="cliente"):
    """Envia email de cancelamento"""
    
    if not obter_configuracao("envio_automatico", False):
        return False
    
    try:
        # Obter configura√ß√µes de email
        email_sistema = obter_configuracao("email_sistema", "")
        senha_email = obter_configuracao("senha_email", "")
        servidor_smtp = obter_configuracao("servidor_smtp", "smtp.gmail.com")
        porta_smtp = obter_configuracao("porta_smtp", 587)
        
        if not email_sistema or not senha_email:
            return False
        
        # Obter dados do profissional
        nome_profissional = obter_configuracao("nome_profissional", "Dr. Jo√£o Silva")
        especialidade = obter_configuracao("especialidade", "Cl√≠nico Geral")
        nome_clinica = obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas")
        telefone_contato = obter_configuracao("telefone_contato", "(11) 3333-4444")
        whatsapp = obter_configuracao("whatsapp", "(11) 99999-9999")
        
        # Endere√ßo completo
        endereco_rua = obter_configuracao("endereco_rua", "Rua das Flores, 123")
        endereco_bairro = obter_configuracao("endereco_bairro", "Centro")
        endereco_cidade = obter_configuracao("endereco_cidade", "S√£o Paulo - SP")
        endereco_completo = f"{endereco_rua}, {endereco_bairro}, {endereco_cidade}"
        
        # Formatar data
        data_obj = datetime.strptime(data, "%Y-%m-%d")
        data_formatada = data_obj.strftime("%d/%m/%Y - %A")
        data_formatada = data_formatada.replace('Monday', 'Segunda-feira')\
            .replace('Tuesday', 'Ter√ßa-feira').replace('Wednesday', 'Quarta-feira')\
            .replace('Thursday', 'Quinta-feira').replace('Friday', 'Sexta-feira')\
            .replace('Saturday', 'S√°bado').replace('Sunday', 'Domingo')
        
        # Criar mensagem baseada em quem cancelou
        msg = MIMEMultipart()
        msg['From'] = email_sistema
        msg['To'] = cliente_email
        
        if cancelado_por == "cliente":
            msg['Subject'] = f"‚úÖ Cancelamento Confirmado - {nome_profissional}"
            corpo = f"""
Ol√° {cliente_nome}!

Seu cancelamento foi processado com sucesso!

üìÖ Data cancelada: {data_formatada}
‚è∞ Hor√°rio cancelado: {horario}
üè• Local: {nome_clinica}

Voc√™ pode fazer um novo agendamento quando desejar atrav√©s do nosso sistema online.

üìû D√∫vidas? Entre em contato:
üì± Telefone: {telefone_contato}
üí¨ WhatsApp: {whatsapp}

Atenciosamente,
{nome_profissional} - {especialidade}
{nome_clinica}
"""
        else:
            msg['Subject'] = f"‚ö†Ô∏è Agendamento Cancelado - {nome_profissional}"
            corpo = f"""
Ol√° {cliente_nome}!

Infelizmente precisamos cancelar seu agendamento:

üìÖ Data: {data_formatada}
‚è∞ Hor√°rio: {horario}
üè• Local: {nome_clinica}

Pedimos desculpas pelo inconveniente. 

Por favor, entre em contato conosco para reagendar:
üìû Telefone: {telefone_contato}
üí¨ WhatsApp: {whatsapp}
üìç Endere√ßo: {endereco_completo}

Ou fa√ßa um novo agendamento atrav√©s do nosso sistema online.

Atenciosamente,
{nome_profissional} - {especialidade}
{nome_clinica}
"""
        
        msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
        
        # Enviar email
        server = smtplib.SMTP(servidor_smtp, porta_smtp)
        server.starttls()
        server.login(email_sistema, senha_email)
        server.send_message(msg)
        server.quit()
        
        return True
        
    except Exception as e:
        print(f"Erro ao enviar email de cancelamento: {e}")
        return False

def exportar_agendamentos_csv():
    """Exporta todos os agendamentos para CSV"""
    import csv
    import io
    
    try:
        # Buscar todos os agendamentos
        agendamentos = buscar_agendamentos()
        
        if not agendamentos:
            return None
        
        # Criar buffer em mem√≥ria
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Cabe√ßalho
        writer.writerow(['ID', 'Data', 'Hor√°rio', 'Nome', 'Telefone', 'Email', 'Status'])
        
        # Dados
        for agendamento in agendamentos:
            if len(agendamento) == 7:
                writer.writerow(agendamento)
            elif len(agendamento) == 6:
                # Adicionar status padr√£o se n√£o existir
                row = list(agendamento) + ['pendente']
                writer.writerow(row)
            else:
                # Formato antigo sem email
                row = list(agendamento) + ['N√£o informado', 'pendente']
                writer.writerow(row)
        
        # Retornar conte√∫do do CSV
        csv_data = output.getvalue()
        output.close()
        
        return csv_data
        
    except Exception as e:
        st.error(f"Erro ao exportar: {e}")
        return None

def importar_agendamentos_csv(csv_content):
    """Importa agendamentos de um arquivo CSV"""
    import csv
    import io
    
    try:
        # Ler o conte√∫do CSV
        csv_file = io.StringIO(csv_content)
        reader = csv.DictReader(csv_file)
        
        conn = conectar()
        c = conn.cursor()
        
        importados = 0
        duplicados = 0
        erros = 0
        
        for row in reader:
            try:
                # Extrair dados do CSV
                agendamento_id = row.get('ID', '')
                data = row.get('Data', '')
                horario = row.get('Hor√°rio', '') or row.get('Horario', '')
                nome = row.get('Nome', '')
                telefone = row.get('Telefone', '')
                email = row.get('Email', '') or row.get('E-mail', '') or ''
                status = row.get('Status', 'pendente')
                
                # Validar dados obrigat√≥rios
                if not all([data, horario, nome, telefone]):
                    erros += 1
                    continue
                
                # Verificar se j√° existe (evitar duplicatas)
                c.execute("SELECT COUNT(*) FROM agendamentos WHERE data=? AND horario=? AND nome_cliente=? AND telefone=?", 
                         (data, horario, nome, telefone))
                
                if c.fetchone()[0] > 0:
                    duplicados += 1
                    continue
                
                # Inserir no banco
                try:
                    c.execute("""INSERT INTO agendamentos 
                               (nome_cliente, telefone, email, data, horario, status) 
                               VALUES (?, ?, ?, ?, ?, ?)""",
                             (nome, telefone, email, data, horario, status))
                    importados += 1
                except sqlite3.OperationalError:
                    # Vers√£o antiga sem email e status
                    c.execute("""INSERT INTO agendamentos 
                               (nome_cliente, telefone, data, horario) 
                               VALUES (?, ?, ?, ?)""",
                             (nome, telefone, data, horario))
                    importados += 1
                    
            except Exception as e:
                print(f"Erro ao processar linha: {e}")
                erros += 1
                continue
        
        conn.commit()
        conn.close()
        
        return {
            'importados': importados,
            'duplicados': duplicados, 
            'erros': erros,
            'sucesso': True
        }
        
    except Exception as e:
        return {
            'importados': 0,
            'duplicados': 0,
            'erros': 0,
            'sucesso': False,
            'erro': str(e)
        }

# ========================================
# 2. ADICIONAR ESTAS FUN√á√ïES ANTES DA LINHA "# Inicializar banco":
# ========================================

def criar_menu_horizontal():
    """Cria menu horizontal responsivo para admin"""
    
    # Inicializar op√ß√£o padr√£o se n√£o existir
    if 'menu_opcao' not in st.session_state:
        st.session_state.menu_opcao = "‚öôÔ∏è Configura√ß√µes Gerais"
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #3b82f6, #1d4ed8); padding: 0.5rem; border-radius: 4px; margin-bottom: 1rem; box-shadow: 0 1px 3px rgba(59,130,246,0.2);">
        <p style="color: white; text-align: center; margin: 0; font-size: 1rem; font-weight: 400; letter-spacing: 1px;">üîß Menu Administrativo</p>
    """, unsafe_allow_html=True)
    
    # Menu responsivo ATUALIZADO com 6 colunas
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col1:
        if st.button("‚öôÔ∏è **Configura√ß√µes**", 
                    key="btn_config", 
                    use_container_width=True,
                    help="Configura√ß√µes gerais do sistema"):
            st.session_state.menu_opcao = "‚öôÔ∏è Configura√ß√µes Gerais"
            st.rerun()
    
    with col2:
        if st.button("üìÖ **Agenda**", 
                    key="btn_agenda", 
                    use_container_width=True,
                    help="Configurar dias √∫teis"):
            st.session_state.menu_opcao = "üìÖ Configurar Agenda"
            st.rerun()
    
    with col3:
        if st.button("üóìÔ∏è **Bloqueios**", 
                    key="btn_bloqueios", 
                    use_container_width=True,
                    help="Gerenciar bloqueios de datas/hor√°rios"):
            st.session_state.menu_opcao = "üóìÔ∏è Gerenciar Bloqueios"
            st.rerun()
    
    with col4:
        if st.button("üë• **Agendamentos**", 
                    key="btn_agendamentos", 
                    use_container_width=True,
                    help="Lista de todos os agendamentos"):
            st.session_state.menu_opcao = "üë• Lista de Agendamentos"
            st.rerun()
    
    with col5:
        if st.button("üíæ **Backup**", 
                    key="btn_backup", 
                    use_container_width=True,
                    help="Backup e restaura√ß√£o de dados"):
            st.session_state.menu_opcao = "üíæ Backup & Restaura√ß√£o"
            st.rerun()
    
    with col6:
        if st.button("üö™ **Sair**", 
                    key="btn_sair", 
                    use_container_width=True,
                    help="Fazer logout do painel admin"):
            st.session_state.authenticated = False
            st.session_state.menu_opcao = "‚öôÔ∏è Configura√ß√µes Gerais"  # Reset
            st.rerun()
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Mostrar op√ß√£o atual selecionada
    st.markdown(f"""
    <div style="background: #f8f9fa; border-left: 4px solid #667eea; padding: 1rem; margin: 1rem 0; border-radius: 8px;">
        <span style="color: #667eea; font-weight: 600;">üìç Se√ß√£o atual: {st.session_state.menu_opcao}</span>
    </div>
    """, unsafe_allow_html=True)
    
    return st.session_state.menu_opcao

# PASSO 1: Adicionar esta fun√ß√£o no app.py (depois das outras fun√ß√µes do banco)

import requests
import json
import base64

def get_github_config():
    """Obt√©m configura√ß√µes do GitHub"""
    
    # Configura√ß√£o padr√£o (fallback)
    config_local = {
        "token": "",  # ‚Üê Vazio agora!
        "repo": "psrs2000/Agenda_Livre",
        "branch": "main",
        "config_file": "configuracoes.json"
    }    
    # Tentar usar secrets primeiro (para Streamlit Cloud)
    try:
        return {
            "token": st.secrets["GITHUB_TOKEN"],
            "repo": st.secrets["GITHUB_REPO"],
            "branch": st.secrets.get("GITHUB_BRANCH", "main"),
            "config_file": st.secrets.get("CONFIG_FILE", "configuracoes.json")
        }
    except:
        # Fallback para configura√ß√£o local
        return config_local

def backup_configuracoes_github():
    """Faz backup de todas as configura√ß√µes para GitHub"""
    try:
        github_config = get_github_config()
        if not github_config or not github_config.get("token"):
            print("‚ùå Configura√ß√£o GitHub n√£o encontrada")
            return False
        
        # Buscar todas as configura√ß√µes do banco local
        conn = conectar()
        c = conn.cursor()
        
        try:
            c.execute("SELECT chave, valor FROM configuracoes")
            configs = dict(c.fetchall())
        except:
            configs = {}
        finally:
            conn.close()
        
        # Adicionar informa√ß√µes do backup
        configs['_backup_timestamp'] = datetime.now().isoformat()
        configs['_backup_version'] = '1.0'
        configs['_sistema'] = 'Agenda Online'
        
        # Converter para JSON bonito
        config_json = json.dumps(configs, indent=2, ensure_ascii=False)
        
        # Enviar para GitHub
        return upload_to_github(config_json, github_config)
        
    except Exception as e:
        print(f"‚ùå Erro no backup GitHub: {e}")
        return False

def upload_to_github(content, github_config):
    """Upload de arquivo para GitHub"""
    try:
        headers = {
            "Authorization": f"token {github_config['token']}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "Sistema-Agendamento"
        }
        
        # URL da API GitHub
        api_url = f"https://api.github.com/repos/{github_config['repo']}/contents/{github_config['config_file']}"
        
        print(f"üîó Conectando: {api_url}")
        
        # Verificar se arquivo j√° existe (para obter SHA)
        response = requests.get(api_url, headers=headers)
        sha = None
        
        if response.status_code == 200:
            sha = response.json()["sha"]
            print("üìÑ Arquivo existente encontrado, atualizando...")
        elif response.status_code == 404:
            print("üìÑ Criando arquivo novo...")
        else:
            print(f"‚ö†Ô∏è Resposta inesperada: {response.status_code}")
        
        # Preparar dados para upload
        content_encoded = base64.b64encode(content.encode('utf-8')).decode('utf-8')
        
        data = {
            "message": f"Backup configura√ß√µes - {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}",
            "content": content_encoded,
            "branch": github_config['branch']
        }
        
        if sha:
            data["sha"] = sha
        
        # Fazer upload
        print("üì§ Enviando backup...")
        response = requests.put(api_url, headers=headers, json=data)
        
        if response.status_code in [200, 201]:
            print("‚úÖ Backup enviado para GitHub com sucesso!")
            return True
        else:
            print(f"‚ùå Erro no upload GitHub: {response.status_code}")
            print(f"üìã Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no upload GitHub: {e}")
        return False


def restaurar_configuracoes_github():
    """Restaura configura√ß√µes do GitHub"""
    try:
        github_config = get_github_config()
        if not github_config or not github_config.get("token"):
            print("‚ö†Ô∏è Configura√ß√£o GitHub n√£o encontrada para restaura√ß√£o")
            return False
        
        # Baixar arquivo do GitHub
        config_json = download_from_github(github_config)
        if not config_json:
            print("üìÑ Nenhum backup encontrado no GitHub")
            return False
        
        # Parse do JSON
        configs = json.loads(config_json)
        
        # Remover metadados do backup
        configs.pop('_backup_timestamp', None)
        configs.pop('_backup_version', None)
        configs.pop('_sistema', None)
        
        # Salvar no banco local
        conn = conectar()
        c = conn.cursor()
        
        try:
            for chave, valor in configs.items():
                c.execute("INSERT OR REPLACE INTO configuracoes (chave, valor) VALUES (?, ?)", 
                         (chave, valor))
            conn.commit()
            print(f"‚úÖ {len(configs)} configura√ß√µes restauradas do GitHub")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar configura√ß√µes restauradas: {e}")
            return False
        finally:
            conn.close()
            
    except Exception as e:
        print(f"‚ùå Erro na restaura√ß√£o GitHub: {e}")
        return False

def download_from_github(github_config):
    """Download de arquivo do GitHub"""
    try:
        headers = {
            "Authorization": f"token {github_config['token']}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "Sistema-Agendamento"
        }
        
        # URL da API GitHub
        api_url = f"https://api.github.com/repos/{github_config['repo']}/contents/{github_config['config_file']}"
        
        print(f"üì• Baixando backup: {api_url}")
        
        response = requests.get(api_url, headers=headers)
        
        if response.status_code == 200:
            # Decodificar conte√∫do base64
            content_encoded = response.json()["content"]
            content = base64.b64decode(content_encoded).decode('utf-8')
            print("‚úÖ Backup baixado com sucesso")
            return content
        elif response.status_code == 404:
            print("üìÑ Arquivo de backup n√£o encontrado no GitHub")
            return None
        else:
            print(f"‚ùå Erro no download GitHub: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro no download GitHub: {e}")
        return None

def get_google_calendar_service():
    """Configura Google Calendar usando Streamlit Secrets"""
    try:
        print("üîç Iniciando get_google_calendar_service...")
        
        # Obter credenciais dos secrets
        creds_info = {
            "client_id": st.secrets["GOOGLE_CLIENT_ID"],
            "client_secret": st.secrets["GOOGLE_CLIENT_SECRET"], 
            "refresh_token": st.secrets["GOOGLE_REFRESH_TOKEN"],
            "token_uri": "https://oauth2.googleapis.com/token"
        }
        
        print("üîç Secrets lidos com sucesso")
        
        from google.oauth2.credentials import Credentials
        from google.auth.transport.requests import Request
        from googleapiclient.discovery import build
        
        print("üîç Imports OK")
        
        credentials = Credentials.from_authorized_user_info(creds_info)
        print("üîç Credentials criadas")
        
        # Renovar token se necess√°rio
        if credentials.expired:
            print("üîç Token expirado, renovando...")
            credentials.refresh(Request())
            print("üîç Token renovado")
        
        print("üîç Criando service...")
        service = build('calendar', 'v3', credentials=credentials)
        print("‚úÖ Service criado com sucesso")
        return service
        
    except Exception as e:
        print(f"‚ùå ERRO NA FUN√á√ÉO: {type(e).__name__}: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def criar_evento_google_calendar(agendamento_id, nome_cliente, telefone, email, data, horario, max_tentativas=3):
    print(f"üîç DEBUG: Tentando criar evento - ID: {agendamento_id}, Cliente: {nome_cliente}")  # ‚Üê ADICIONAR ESTA LINHA
    """Cria evento no Google Calendar com m√∫ltiplas tentativas"""
    
    for tentativa in range(1, max_tentativas + 1):
        try:
            print(f"üîÑ Tentativa {tentativa}/{max_tentativas} - Criando evento Google Calendar")
            
            service = get_google_calendar_service()
            if not service:
                print(f"‚ùå Tentativa {tentativa}: Falha ao conectar com Google Calendar")
                if tentativa < max_tentativas:
                    time.sleep(tentativa * 2)
                    continue
                return False
            
            # Configura√ß√µes do calend√°rio
            calendar_id = st.secrets.get("GOOGLE_CALENDAR_ID", "primary")
            
            # Montar data/hora do evento
            data_inicio = datetime.strptime(f"{data} {horario}", "%Y-%m-%d %H:%M")
            
            # Dura√ß√£o baseada na configura√ß√£o
            intervalo_consultas = obter_configuracao("intervalo_consultas", 60)
            data_fim = data_inicio + timedelta(minutes=intervalo_consultas)
            
            # Dados do profissional
            nome_profissional = obter_configuracao("nome_profissional", "Dr. Jo√£o Silva")
            especialidade = obter_configuracao("especialidade", "Cl√≠nico Geral")
            nome_clinica = obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas")
            
            evento = {
                'summary': f'üìÖ {nome_cliente} - {especialidade}',
                'description': f'''
üè• {nome_clinica}
üë®‚Äç‚öïÔ∏è {nome_profissional} - {especialidade}

üë§ Cliente: {nome_cliente}
üì± Telefone: {telefone}
üìß Email: {email}

üÜî ID: {agendamento_id}
üìù Sistema de Agendamento Online
                '''.strip(),
                'start': {
                    'dateTime': data_inicio.isoformat(),
                    'timeZone': 'America/Sao_Paulo',
                },
                'end': {
                    'dateTime': data_fim.isoformat(),
                    'timeZone': 'America/Sao_Paulo',
                },
                'attendees': [
                    {'email': email}
                ] if email else [],
                'reminders': {
                    'useDefault': False,
                    'overrides': [
                        {'method': 'email', 'minutes': 24 * 60},  # 1 dia antes
                        {'method': 'popup', 'minutes': 60},       # 1 hora antes
                    ],
                },
                'colorId': '2',  # Verde para consultas
            }
            
            evento_criado = service.events().insert(
                calendarId=calendar_id, 
                body=evento
            ).execute()
            
            # Se chegou aqui, deu certo!
            print(f"‚úÖ Evento criado com sucesso na tentativa {tentativa}")
            
            # Salvar ID do evento no banco
            salvar_event_id_google(agendamento_id, evento_criado['id'])
            
            return evento_criado['id']
            
        except Exception as e:
            print(f"‚ùå Tentativa {tentativa} falhou: {str(e)}")
            
            # Se n√£o √© a √∫ltima tentativa, aguardar antes de tentar novamente
            if tentativa < max_tentativas:
                delay = (tentativa ** 2) + random.uniform(0.5, 1.5)
                print(f"‚è≥ Aguardando {delay:.1f}s antes da pr√≥xima tentativa...")
                time.sleep(delay)
            else:
                print(f"üí• Todas as {max_tentativas} tentativas falharam para criar evento!")
                return False
    
    return False

def deletar_evento_google_calendar(agendamento_id, max_tentativas=3):
    """Deleta evento do Google Calendar com m√∫ltiplas tentativas"""
    
    for tentativa in range(1, max_tentativas + 1):
        try:
            print(f"üîÑ Tentativa {tentativa}/{max_tentativas} - Deletando evento Google Calendar")
            
            service = get_google_calendar_service()
            if not service:
                print(f"‚ùå Tentativa {tentativa}: Falha ao conectar com Google Calendar")
                if tentativa < max_tentativas:
                    time.sleep(tentativa * 2)  # 2s, 4s, 6s...
                    continue
                return False
            
            # Buscar ID do evento
            event_id = obter_event_id_google(agendamento_id)
            if not event_id:
                print(f"‚ö†Ô∏è Event ID n√£o encontrado para agendamento {agendamento_id}")
                return False
            
            calendar_id = st.secrets.get("GOOGLE_CALENDAR_ID", "primary")
            
            # Tentar deletar
            service.events().delete(
                calendarId=calendar_id, 
                eventId=event_id
            ).execute()
            
            # Se chegou aqui, deu certo!
            print(f"‚úÖ Evento deletado com sucesso na tentativa {tentativa}")
            
            # Remover ID do banco apenas se deletou com sucesso
            remover_event_id_google(agendamento_id)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Tentativa {tentativa} falhou: {str(e)}")
            
            # Se n√£o √© a √∫ltima tentativa, aguardar antes de tentar novamente
            if tentativa < max_tentativas:
                # Backoff exponencial com jitter
                delay = (tentativa ** 2) + random.uniform(0.5, 1.5)  # 1-2.5s, 4-5.5s, 9-10.5s
                print(f"‚è≥ Aguardando {delay:.1f}s antes da pr√≥xima tentativa...")
                time.sleep(delay)
            else:
                print(f"üí• Todas as {max_tentativas} tentativas falharam!")
                
                # IMPORTANTE: Mesmo que falhe, marcar como "tentou deletar" 
                # para n√£o ficar tentando infinitamente
                remover_event_id_google(agendamento_id)
                
                return False
    
    return False

def atualizar_evento_google_calendar(agendamento_id, nome_cliente, status, max_tentativas=3):
    """Atualiza evento no Google Calendar com m√∫ltiplas tentativas"""
    
    for tentativa in range(1, max_tentativas + 1):
        try:
            print(f"üîÑ Tentativa {tentativa}/{max_tentativas} - Atualizando evento Google Calendar")
            
            service = get_google_calendar_service()
            if not service:
                print(f"‚ùå Tentativa {tentativa}: Falha ao conectar com Google Calendar")
                if tentativa < max_tentativas:
                    time.sleep(tentativa * 2)
                    continue
                return False
            
            event_id = obter_event_id_google(agendamento_id)
            if not event_id:
                print(f"‚ö†Ô∏è Event ID n√£o encontrado para agendamento {agendamento_id}")
                return False
            
            calendar_id = st.secrets.get("GOOGLE_CALENDAR_ID", "primary")
            
            # Buscar evento atual
            evento = service.events().get(
                calendarId=calendar_id, 
                eventId=event_id
            ).execute()
            
            # Atualizar t√≠tulo baseado no status
            if status == 'atendido':
                evento['summary'] = f'‚úÖ ATENDIDO - {nome_cliente}'
                evento['colorId'] = '10'  # Verde escuro para atendidos
            elif status == 'cancelado':
                evento['summary'] = f'‚ùå CANCELADO - {nome_cliente}'
                evento['colorId'] = '4'  # Vermelho para cancelados
            
            service.events().update(
                calendarId=calendar_id, 
                eventId=event_id, 
                body=evento
            ).execute()
            
            print(f"‚úÖ Evento atualizado com sucesso na tentativa {tentativa}")
            return True
            
        except Exception as e:
            print(f"‚ùå Tentativa {tentativa} falhou: {str(e)}")
            
            if tentativa < max_tentativas:
                delay = (tentativa ** 2) + random.uniform(0.5, 1.5)
                print(f"‚è≥ Aguardando {delay:.1f}s antes da pr√≥xima tentativa...")
                time.sleep(delay)
            else:
                print(f"üí• Todas as {max_tentativas} tentativas falharam para atualizar evento!")
                return False
    
    return False

def salvar_event_id_google(agendamento_id, event_id):
    """Salva ID do evento Google Calendar no banco"""
    conn = conectar()
    c = conn.cursor()
    try:
        # Criar coluna se n√£o existir
        try:
            c.execute("ALTER TABLE agendamentos ADD COLUMN google_event_id TEXT")
        except sqlite3.OperationalError:
            pass  # Coluna j√° existe
        
        c.execute("UPDATE agendamentos SET google_event_id = ? WHERE id = ?", 
                  (event_id, agendamento_id))
        conn.commit()
        print(f"üíæ Event ID salvo: {event_id}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar event ID: {e}")
    finally:
        conn.close()

def obter_event_id_google(agendamento_id):
    """Obt√©m ID do evento Google Calendar"""
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("SELECT google_event_id FROM agendamentos WHERE id = ?", (agendamento_id,))
        resultado = c.fetchone()
        return resultado[0] if resultado and resultado[0] else None
    except sqlite3.OperationalError:
        return None  # Coluna n√£o existe ainda
    except Exception as e:
        print(f"‚ùå Erro ao obter event ID: {e}")
        return None
    finally:
        conn.close()

def remover_event_id_google(agendamento_id):
    """Remove ID do evento Google Calendar"""
    conn = conectar()
    c = conn.cursor()
    try:
        c.execute("UPDATE agendamentos SET google_event_id = NULL WHERE id = ?", 
                  (agendamento_id,))
        conn.commit()
        print(f"üóëÔ∏è Event ID removido para agendamento {agendamento_id}")
    except Exception as e:
        print(f"‚ùå Erro ao remover event ID: {e}")
    finally:
        conn.close()

# ========================================
# FUN√á√ïES PARA BACKUP POR EMAIL - PASSO 1
# ========================================

def calcular_hash_agendamentos():
    """Calcula hash dos agendamentos para detectar mudan√ßas"""
    try:
        agendamentos = buscar_agendamentos()
        # Converter para string ordenada para hash consistente
        dados_str = str(sorted(agendamentos))
        return hashlib.md5(dados_str.encode()).hexdigest()
    except:
        return ""

def agendamentos_mudaram():
    """Verifica se houve mudan√ßas desde √∫ltimo backup"""
    hash_atual = calcular_hash_agendamentos()
    hash_anterior = obter_configuracao("ultimo_backup_hash", "")
    
    if hash_atual != hash_anterior:
        # Salvar novo hash
        salvar_configuracao("ultimo_backup_hash", hash_atual)
        return True
    return False

def enviar_backup_email_agendamentos(forcar_envio=False):
    """Envia backup dos agendamentos por email"""
    
    # Verificar se backup autom√°tico est√° ativo
    backup_automatico_ativo = obter_configuracao("backup_email_ativo", False)
    if not backup_automatico_ativo and not forcar_envio:
        print("üìß Backup autom√°tico por email desativado")
        return False
    
    # Verificar se h√° mudan√ßas (se n√£o for for√ßado)
    if not forcar_envio and not agendamentos_mudaram():
        print("üìä Sem mudan√ßas desde √∫ltimo backup - n√£o enviando")
        return False
    
    try:
        # Obter configura√ß√µes de email
        email_sistema = obter_configuracao("email_sistema", "")
        senha_email = obter_configuracao("senha_email", "")
        servidor_smtp = obter_configuracao("servidor_smtp", "smtp.gmail.com")
        porta_smtp = obter_configuracao("porta_smtp", 587)
        
        # Email de destino para backup
        email_backup = obter_configuracao("email_backup_destino", email_sistema)
        
        if not email_sistema or not senha_email or not email_backup:
            print("‚ùå Configura√ß√µes de email incompletas para backup")
            return False
        
        # Gerar CSV dos agendamentos
        csv_data = exportar_agendamentos_csv()
        if not csv_data:
            print("‚ùå Nenhum agendamento para fazer backup")
            return False
        
        # Estat√≠sticas para o email
        agendamentos = buscar_agendamentos()
        total_agendamentos = len(agendamentos)
        
        # Contar por status
        pendentes = len([a for a in agendamentos if len(a) > 6 and a[6] == "pendente"])
        confirmados = len([a for a in agendamentos if len(a) > 6 and a[6] == "confirmado"])
        atendidos = len([a for a in agendamentos if len(a) > 6 and a[6] == "atendido"])
        cancelados = len([a for a in agendamentos if len(a) > 6 and a[6] == "cancelado"])
        
        # Data/hora atual
        agora = datetime.now()
        data_formatada = agora.strftime("%d/%m/%Y √†s %H:%M")
        
        # Nome do arquivo
        nome_arquivo = f"agendamentos_backup_{agora.strftime('%Y%m%d_%H%M%S')}.csv"
        
        # Dados do profissional/cl√≠nica
        nome_profissional = obter_configuracao("nome_profissional", "Dr. Jo√£o Silva")
        nome_clinica = obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas")
        
        # Criar email
        msg = MIMEMultipart()
        msg['From'] = email_sistema
        msg['To'] = email_backup
        msg['Subject'] = f"üìä Backup Agendamentos - {nome_clinica} - {agora.strftime('%d/%m/%Y')}"
        
        # Corpo do email
        corpo = f"""
üìã Backup Autom√°tico de Agendamentos

üè• {nome_clinica}
üë®‚Äç‚öïÔ∏è {nome_profissional}

üìÖ Data/Hora do Backup: {data_formatada}
üìä Total de Agendamentos: {total_agendamentos}

üìà Estat√≠sticas por Status:
‚è≥ Pendentes: {pendentes}
‚úÖ Confirmados: {confirmados}
üéâ Atendidos: {atendidos}
‚ùå Cancelados: {cancelados}

üìé Arquivo em Anexo: {nome_arquivo}
üíæ Tamanho: {len(csv_data.encode('utf-8')) / 1024:.1f} KB

ü§ñ Mensagem autom√°tica do Sistema de Agendamento
"""
        
        # Anexar corpo do email
        msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
        
        # Anexar arquivo CSV
        from email.mime.application import MIMEApplication
        anexo = MIMEApplication(csv_data.encode('utf-8'), _subtype="csv")
        anexo.add_header('Content-Disposition', 'attachment', filename=nome_arquivo)
        msg.attach(anexo)
        
        # Enviar email
        server = smtplib.SMTP(servidor_smtp, porta_smtp)
        server.starttls()
        server.login(email_sistema, senha_email)
        server.send_message(msg)
        server.quit()
        
        # Salvar data do √∫ltimo backup
        salvar_configuracao("ultimo_backup_email_data", agora.isoformat())
        
        print(f"‚úÖ Backup enviado por email para {email_backup}")
        print(f"üìä {total_agendamentos} agendamentos inclu√≠dos no backup")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao enviar backup por email: {e}")
        return False

def interface_backup_email():
    """Interface para configurar backup autom√°tico por email"""
    
    st.subheader("üìß Backup Autom√°tico por Email")
    
    # Status atual
    backup_ativo = obter_configuracao("backup_email_ativo", False)
    
    if backup_ativo:
        st.success("‚úÖ Backup autom√°tico por email ATIVADO")
        
        # Mostrar configura√ß√µes atuais
        frequencia = obter_configuracao("backup_email_frequencia", "semanal")
        horario = obter_configuracao("backup_email_horario", "08:00")
        email_destino = obter_configuracao("email_backup_destino", "")
        
        st.info(f"""
**üìã Configura√ß√µes Atuais:**
‚Ä¢ **Frequ√™ncia:** {frequencia.title()}
‚Ä¢ **Hor√°rio:** {horario}
‚Ä¢ **Email de destino:** {email_destino}
        """)
        
        # Mostrar √∫ltimo backup
        ultimo_backup_str = obter_configuracao("ultimo_backup_email_data", "")
        if ultimo_backup_str:
            try:
                ultimo_backup = datetime.fromisoformat(ultimo_backup_str)
                ultimo_formatado = ultimo_backup.strftime("%d/%m/%Y √†s %H:%M")
                st.info(f"üìÖ **√öltimo backup enviado:** {ultimo_formatado}")
            except:
                pass
    else:
        st.warning("‚ö†Ô∏è Backup autom√°tico por email DESATIVADO")
    
    # Configura√ß√µes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**‚öôÔ∏è Configura√ß√µes do Backup**")
        
        # Ativar/desativar
        backup_email_ativo = st.checkbox(
            "Ativar backup autom√°tico por email",
            value=backup_ativo,
            help="Envia backup dos agendamentos automaticamente por email"
        )
        
        # Frequ√™ncia
        frequencia_backup = st.selectbox(
            "Frequ√™ncia do backup:",
            ["diario", "semanal", "mensal"],
            index=["diario", "semanal", "mensal"].index(obter_configuracao("backup_email_frequencia", "semanal")),
            format_func=lambda x: {"diario": "Di√°rio", "semanal": "Semanal", "mensal": "Mensal"}[x],
            help="Com que frequ√™ncia enviar o backup"
        )
        
        # Hor√°rio
        try:
            horario_atual = datetime.strptime(obter_configuracao("backup_email_horario", "08:00"), "%H:%M").time()
        except:
            horario_atual = datetime.strptime("08:00", "%H:%M").time()
        
        horario_backup = st.time_input(
            "Hor√°rio do backup:",
            value=horario_atual,
            help="Hor√°rio para enviar o backup automaticamente"
        )
        
        # Email de destino
        email_backup_destino = st.text_input(
            "Email de destino:",
            value=obter_configuracao("email_backup_destino", obter_configuracao("email_sistema", "")),
            placeholder="backup@clinica.com",
            help="Email que receber√° os backups autom√°ticos"
        )
    
    with col2:
        st.markdown("**üß™ Teste e Backup Manual**")
        
        # Backup manual
        if st.button("üì§ Enviar Backup Agora", type="secondary", help="Enviar backup manual independente das configura√ß√µes"):
            with st.spinner("Gerando e enviando backup..."):
                sucesso = enviar_backup_email_agendamentos(forcar_envio=True)
                if sucesso:
                    st.success("‚úÖ Backup enviado com sucesso!")
                else:
                    st.error("‚ùå Erro ao enviar backup. Verifique as configura√ß√µes de email.")
        
        # Verificar mudan√ßas
        if st.button("üîç Verificar Mudan√ßas", help="Verificar se h√° mudan√ßas desde √∫ltimo backup"):
            if agendamentos_mudaram():
                st.info("üìä H√° mudan√ßas nos agendamentos desde √∫ltimo backup")
            else:
                st.success("‚úÖ Nenhuma mudan√ßa desde √∫ltimo backup")
        
        # Informa√ß√µes
        st.markdown("**‚ÑπÔ∏è Como Funciona:**")
        st.info("""
‚Ä¢ **Autom√°tico:** Verifica mudan√ßas e envia apenas se necess√°rio
‚Ä¢ **Inteligente:** N√£o envia spam se n√£o houver altera√ß√µes  
‚Ä¢ **Seguro:** Anexa CSV com todos os agendamentos
‚Ä¢ **Informativo:** Email com estat√≠sticas detalhadas
        """)
    
    # Bot√£o para salvar configura√ß√µes
    if st.button("üíæ Salvar Configura√ß√µes de Backup", type="primary", use_container_width=True):
        salvar_configuracao("backup_email_ativo", backup_email_ativo)
        salvar_configuracao("backup_email_frequencia", frequencia_backup)
        salvar_configuracao("backup_email_horario", horario_backup.strftime("%H:%M"))
        salvar_configuracao("email_backup_destino", email_backup_destino)
        
        st.success("‚úÖ Configura√ß√µes de backup salvas!")
        
        if backup_email_ativo:
            st.info(f"""
üéØ **Backup configurado:**
‚Ä¢ **Frequ√™ncia:** {frequencia_backup.title()}
‚Ä¢ **Hor√°rio:** {horario_backup.strftime('%H:%M')}  
‚Ä¢ **Email:** {email_backup_destino}

üìß Pr√≥ximo backup ser√° enviado automaticamente se houver mudan√ßas!
            """)
        else:
            st.warning("‚ö†Ô∏è Backup autom√°tico foi desativado")
        
        st.rerun()

def verificar_hora_backup():
    """Verifica se chegou a hora do backup autom√°tico"""
    try:
        backup_ativo = obter_configuracao("backup_email_ativo", False)
        if not backup_ativo:
            return False
        
        # Configura√ß√µes de agendamento
        frequencia = obter_configuracao("backup_email_frequencia", "semanal")
        horario = obter_configuracao("backup_email_horario", "08:00")
        
        agora = datetime.now()
        hora_backup = datetime.strptime(horario, "%H:%M").time()
        
        # Verificar se √© a hora do backup (com toler√¢ncia de 1 minuto)
        if abs((agora.time().hour * 60 + agora.time().minute) - 
               (hora_backup.hour * 60 + hora_backup.minute)) > 1:
            return False
        
        # Verificar frequ√™ncia
        ultimo_backup_str = obter_configuracao("ultimo_backup_email_data", "")
        
        if not ultimo_backup_str:
            return True  # Primeiro backup
        
        try:
            ultimo_backup = datetime.fromisoformat(ultimo_backup_str)
        except:
            return True  # Se der erro, fazer backup
        
        if frequencia == "diario":
            return (agora - ultimo_backup).days >= 1
        elif frequencia == "semanal":
            return (agora - ultimo_backup).days >= 7
        elif frequencia == "mensal":
            return (agora - ultimo_backup).days >= 30
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar hora do backup: {e}")
        return False

def iniciar_monitoramento_backup():
    """Inicia thread para monitoramento autom√°tico de backup"""
    def monitorar():
        print("üîÑ Monitoramento de backup autom√°tico iniciado")
        while True:
            try:
                if verificar_hora_backup():
                    print("‚è∞ Hora do backup autom√°tico!")
                    sucesso = enviar_backup_email_agendamentos()
                    if sucesso:
                        print("‚úÖ Backup autom√°tico enviado com sucesso!")
                    else:
                        print("‚ùå Falha no backup autom√°tico")
                
                # Verificar a cada minuto
                time.sleep(60)
                
            except Exception as e:
                print(f"‚ùå Erro no monitoramento de backup: {e}")
                time.sleep(300)  # Esperar 5 minutos se der erro
    
    # Iniciar thread em background
    thread = threading.Thread(target=monitorar, daemon=True)
    thread.start()

# ========================================
# FUN√á√ïES NOVAS PARA BLOQUEIOS DE PER√çODO
# ========================================

def init_config_periodos():
    """Adiciona tabela de bloqueios de per√≠odo ao banco"""
    conn = conectar()
    c = conn.cursor()
    
    # Criar tabela para bloqueios de per√≠odo
    c.execute('''
        CREATE TABLE IF NOT EXISTS bloqueios_periodos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data_inicio TEXT,
            data_fim TEXT,
            descricao TEXT,
            criado_em TEXT
        )
    ''')
    
    conn.commit()
    conn.close()

def adicionar_bloqueio_periodo(data_inicio, data_fim, descricao=""):
    """Adiciona um bloqueio de per√≠odo (ex: f√©rias, viagem)"""
    conn = conectar()
    c = conn.cursor()
    
    try:
        # Salvar o per√≠odo na nova tabela
        from datetime import datetime
        criado_em = datetime.now().isoformat()
        
        c.execute("""INSERT INTO bloqueios_periodos 
                    (data_inicio, data_fim, descricao, criado_em) 
                    VALUES (?, ?, ?, ?)""", 
                 (data_inicio, data_fim, descricao, criado_em))
        
        periodo_id = c.lastrowid
        conn.commit()
        conn.close()
        
        return periodo_id
        
    except Exception as e:
        conn.close()
        print(f"Erro ao adicionar per√≠odo: {e}")
        return False

def obter_bloqueios_periodos():
    """Obt√©m todos os bloqueios de per√≠odo"""
    conn = conectar()
    c = conn.cursor()
    
    try:
        c.execute("""SELECT id, data_inicio, data_fim, descricao, criado_em 
                    FROM bloqueios_periodos 
                    ORDER BY data_inicio""")
        periodos = c.fetchall()
        return periodos
    except:
        return []
    finally:
        conn.close()

def remover_bloqueio_periodo(periodo_id):
    """Remove um bloqueio de per√≠odo"""
    conn = conectar()
    c = conn.cursor()
    
    try:
        c.execute("DELETE FROM bloqueios_periodos WHERE id=?", (periodo_id,))
        conn.commit()
        conn.close()
        return True
    except:
        conn.close()
        return False

def data_em_periodo_bloqueado(data):
    """Verifica se uma data est√° em algum per√≠odo bloqueado"""
    conn = conectar()
    c = conn.cursor()
    
    try:
        c.execute("""SELECT COUNT(*) FROM bloqueios_periodos 
                    WHERE ? BETWEEN data_inicio AND data_fim""", (data,))
        
        resultado = c.fetchone()[0] > 0
        conn.close()
        return resultado
    except:
        conn.close()
        return False
    
# Inicializar banco
init_config()

# Inicializar monitoramento de backup autom√°tico
iniciar_monitoramento_backup()

# Inicializar tabela de per√≠odos
init_config_periodos()

# Restaurar configura√ß√µes do GitHub
restaurar_configuracoes_github()

# INTERFACE PRINCIPAL
if is_admin:
    # PAINEL ADMINISTRATIVO
    st.markdown("""
    <div class="admin-header">
        <h1>üîê Painel Administrativo</h1>
        <div class="badge">Sistema de Agendamento</div>
    </div>
    """, unsafe_allow_html=True)
    
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        st.markdown('<div class="main-card">', unsafe_allow_html=True)
        st.subheader("üîí Acesso Restrito")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            senha = st.text_input("Digite a senha de administrador:", type="password")
            
            if st.button("üö™ Entrar", type="primary", use_container_width=True):
                if senha == SENHA_CORRETA:
                    st.session_state.authenticated = True
                    st.rerun()
                else:
                    st.error("‚ùå Senha incorreta!")
        
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        
        # Estat√≠sticas
        agendamentos = buscar_agendamentos()
        bloqueios = obter_bloqueios()
        
        hoje = datetime.now().strftime("%Y-%m-%d")
        agendamentos_hoje = [a for a in agendamentos if a[1] == hoje]
        agendamentos_mes = [a for a in agendamentos if a[1].startswith(datetime.now().strftime("%Y-%m"))]
        
        st.markdown("""
        <div class="stats-container">
            <div class="stat-card">
                <div class="stat-number">{}</div>
                <div class="stat-label">Agendamentos Hoje</div>
            </div>
            <div class="stat-card success">
                <div class="stat-number">{}</div>
                <div class="stat-label">Total Este M√™s</div>
            </div>
            <div class="stat-card warning">
                <div class="stat-number">{}</div>
                <div class="stat-label">Datas Bloqueadas</div>
            </div>
            <div class="stat-card danger">
                <div class="stat-number">{}</div>
                <div class="stat-label">Total de Agendamentos</div>
            </div>
        </div>
        """.format(len(agendamentos_hoje), len(agendamentos_mes), len(bloqueios), len(agendamentos)), unsafe_allow_html=True)
        
        # Conte√∫do baseado na op√ß√£o
                # Interface administrativa autenticada com menu horizontal
        opcao = criar_menu_horizontal()
        
        # Conte√∫do baseado na op√ß√£o
        if opcao == "‚öôÔ∏è Configura√ß√µes Gerais":

            st.markdown('<div class="main-card">', unsafe_allow_html=True)
            st.markdown('<div class="card-header"><h2 class="card-title">‚öôÔ∏è Configura√ß√µes Gerais</h2></div>', unsafe_allow_html=True)
            
            # Tabs para organizar as configura√ß√µes
            tab1, tab2, tab3 = st.tabs(["üìÖ Agendamento", "üìû Contato & Local", "üìß Email & Notifica√ß√µes"])
            
            with tab1:
                st.subheader("üìÖ Configura√ß√µes de Agendamento")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üìÜ Per√≠odo de Agendamento**")
                    
                    # Dias futuros dispon√≠veis
                    dias_futuros = st.slider(
                        "Quantos dias no futuro a agenda ficar√° aberta:",
                        min_value=7,
                        max_value=120,
                        value=obter_configuracao("dias_futuros", 30),
                        step=1,
                        help="Defina at√© quantos dias no futuro os clientes podem agendar"
                    )
                    
                    # Anteced√™ncia m√≠nima
                    antecedencia_atual = obter_configuracao("antecedencia_minima", 2)
                    antecedencia_opcoes = {
                        "30 minutos": 0.5,
                        "1 hora": 1,
                        "2 horas": 2,
                        "4 horas": 4,
                        "6 horas": 6,
                        "12 horas": 12,
                        "24 horas": 24,
                        "48 horas": 48
                    }
                    
                    antecedencia_texto = "2 horas"
                    for texto, horas in antecedencia_opcoes.items():
                        if horas == antecedencia_atual:
                            antecedencia_texto = texto
                            break
                    
                    antecedencia_selecionada = st.selectbox(
                        "Anteced√™ncia m√≠nima para agendamento:",
                        list(antecedencia_opcoes.keys()),
                        index=list(antecedencia_opcoes.keys()).index(antecedencia_texto),
                        help="Tempo m√≠nimo necess√°rio entre o agendamento e 00:00 da data da  consulta"
                    )
                
                with col2:
                    st.markdown("**üïê Hor√°rios de Funcionamento**")
                    
                    # Hor√°rio de in√≠cio
                    try:
                        time_inicio = datetime.strptime(obter_configuracao("horario_inicio", "09:00"), "%H:%M").time()
                    except:
                        time_inicio = datetime.strptime("09:00", "%H:%M").time()
                    
                    horario_inicio = st.time_input(
                        "Hor√°rio de in√≠cio:",
                        value=time_inicio,
                        help="Primeiro hor√°rio dispon√≠vel para agendamento"
                    )
                    
                    # Hor√°rio de fim
                    try:
                        time_fim = datetime.strptime(obter_configuracao("horario_fim", "18:00"), "%H:%M").time()
                    except:
                        time_fim = datetime.strptime("18:00", "%H:%M").time()
                    
                    horario_fim = st.time_input(
                        "Hor√°rio de t√©rmino:",
                        value=time_fim,
                        help="√öltimo hor√°rio dispon√≠vel para agendamento"
                    )
                    
                    # Intervalo entre consultas
                    intervalo_atual = obter_configuracao("intervalo_consultas", 60)
                    intervalo_opcoes = {
                        "15 minutos": 15,
                        "30 minutos": 30,
                        "45 minutos": 45,
                        "1 hora": 60,
                        "1h 15min": 75,
                        "1h 30min": 90,
                        "2 horas": 120,
                        "2h 30min": 150,
                        "3 horas": 180
                    }
                    
                    intervalo_texto = "1 hora"
                    for texto, minutos in intervalo_opcoes.items():
                        if minutos == intervalo_atual:
                            intervalo_texto = texto
                            break
                    
                    intervalo_selecionado = st.selectbox(
                        "Dura√ß√£o de cada agendamento:",
                        list(intervalo_opcoes.keys()),
                        index=list(intervalo_opcoes.keys()).index(intervalo_texto),
                        help="Tempo padr√£o reservado para cada agendamento"
                    )
                
                # Configura√ß√µes de confirma√ß√£o
                st.markdown("---")
                st.markdown("**üîÑ Modo de Confirma√ß√£o**")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    confirmacao_automatica = st.checkbox(
                        "Confirma√ß√£o autom√°tica de agendamentos",
                        value=obter_configuracao("confirmacao_automatica", False),
                        help="Se ativado, agendamentos s√£o confirmados automaticamente sem necessidade de aprova√ß√£o manual"
                    )
                
                with col2:
                    if not confirmacao_automatica:
                        st.info("üí° **Modo Manual:** Voc√™ precisar√° confirmar cada agendamento manualmente na aba 'Lista de Agendamentos'")
                    else:
                        st.success("‚úÖ **Modo Autom√°tico:** Agendamentos s√£o confirmados instantaneamente")
                
            
            with tab2:
                st.subheader("üìû Informa√ß√µes de Contato e Local")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**üë®‚Äç‚öïÔ∏è Informa√ß√µes Profissionais**")
                    
                    nome_profissional = st.text_input(
                        "Nome do profissional:",
                        value=obter_configuracao("nome_profissional", "Dr. Jo√£o Silva"),
                        help="Nome que aparecer√° no sistema e nos emails"
                    )
                    
                    especialidade = st.text_input(
                        "Especialidade/√Årea:",
                        value=obter_configuracao("especialidade", "Cl√≠nico Geral"),
                        help="Ex: Dermatologia, Psicologia, etc."
                    )
                    
                    registro_profissional = st.text_input(
                        "Registro profissional:",
                        value=obter_configuracao("registro_profissional", "CRM 12345"),
                        help="Ex: CRM, CRP, CRO, etc."
                    )
                
                with col2:
                    st.markdown("**üè• Informa√ß√µes do Local**")
                    
                    nome_clinica = st.text_input(
                        "Nome da cl√≠nica/estabelecimento:",
                        value=obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas"),
                        help="Nome do local de atendimento"
                    )
                    
                    telefone_contato = st.text_input(
                        "Telefone de contato:",
                        value=obter_configuracao("telefone_contato", "(11) 3333-4444"),
                        help="Telefone que aparecer√° no sistema"
                    )
                    
                    whatsapp = st.text_input(
                        "WhatsApp:",
                        value=obter_configuracao("whatsapp", "(11) 99999-9999"),
                        help="N√∫mero do WhatsApp para contato"
                    )
                
                st.markdown("**üìç Endere√ßo Completo**")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    endereco_rua = st.text_input(
                        "Rua/Avenida:",
                        value=obter_configuracao("endereco_rua", "Rua das Flores, 123"),
                        help="Rua, n√∫mero e complemento"
                    )
                
                with col2:
                    endereco_bairro = st.text_input(
                        "Bairro:",
                        value=obter_configuracao("endereco_bairro", "Centro"),
                        help="Bairro do estabelecimento"
                    )
                
                with col3:
                    endereco_cidade = st.text_input(
                        "Cidade - UF:",
                        value=obter_configuracao("endereco_cidade", "S√£o Paulo - SP"),
                        help="Cidade e estado"
                    )
                
                # Instru√ß√µes adicionais
                st.markdown("**üìù Instru√ß√µes Adicionais**")
                
                instrucoes_chegada = st.text_area(
                    "Instru√ß√µes para chegada:",
                    value=obter_configuracao("instrucoes_chegada", "Favor chegar 10 minutos antes do hor√°rio agendado."),
                    help="Instru√ß√µes que aparecer√£o nos emails de confirma√ß√£o",
                    height=100
                )
            
            with tab3:
                st.subheader("üìß Configura√ß√µes de Email e Notifica√ß√µes")
                
                # Ativar/desativar sistema de email
                envio_automatico = st.checkbox(
                    "Ativar envio autom√°tico de emails",
                    value=obter_configuracao("envio_automatico", False),
                    help="Se ativado, emails ser√£o enviados automaticamente para confirma√ß√µes e cancelamentos"
                )
                
                if envio_automatico:
                    st.markdown("---")
                    st.markdown("**‚öôÔ∏è Configura√ß√µes do Servidor SMTP**")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        email_sistema = st.text_input(
                            "Email do sistema:",
                            value=obter_configuracao("email_sistema", ""),
                            placeholder="sistema@clinica.com",
                            help="Email que enviar√° as confirma√ß√µes autom√°ticas"
                        )
                        
                        servidor_smtp = st.text_input(
                            "Servidor SMTP:",
                            value=obter_configuracao("servidor_smtp", "smtp.gmail.com"),
                            help="Para Gmail: smtp.gmail.com | Para Outlook: smtp-mail.outlook.com"
                        )
                    
                    with col2:
                        senha_email = st.text_input(
                            "Senha do email:",
                            value=obter_configuracao("senha_email", ""),
                            type="password",
                            help="Para Gmail: use senha de app (n√£o a senha normal da conta)"
                        )
                        
                        try:
                            porta_valor = obter_configuracao("porta_smtp", 587)
                            porta_smtp_value = int(porta_valor) if porta_valor and str(porta_valor).strip() else 587
                        except (ValueError, TypeError):
                            porta_smtp_value = 587

                        porta_smtp = st.number_input(
                            "Porta SMTP:",
                            value=porta_smtp_value,
                            help="Para Gmail: 587 | Para Outlook: 587"
                        )                    
                    # Configura√ß√µes de envio
                    st.markdown("---")
                    st.markdown("**üì¨ Tipos de Email Autom√°tico**")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        enviar_confirmacao = st.checkbox(
                            "Enviar email de confirma√ß√£o",
                            value=obter_configuracao("enviar_confirmacao", True),
                            help="Envia email quando agendamento √© confirmado"
                        )
                        

                    
                    with col2:
                        enviar_cancelamento = st.checkbox(
                            "Enviar email de cancelamento",
                            value=obter_configuracao("enviar_cancelamento", True),
                            help="Envia email quando agendamento √© cancelado"
                        )
                        
                    
                    # Template de email
                    st.markdown("---")
                    st.markdown("**‚úâÔ∏è Personalizar Mensagens**")
                    
                    template_confirmacao = st.text_area(
                        "Template de confirma√ß√£o:",
                        value=obter_configuracao("template_confirmacao", 
                            "Ol√° {nome}!\n\nSeu agendamento foi confirmado:\nüìÖ Data: {data}\n‚è∞ Hor√°rio: {horario}\n\nAguardamos voc√™!"),
                        help="Use {nome}, {data}, {horario}, {local} como vari√°veis",
                        height=100
                    )
                    
                    # Teste de email
                    st.markdown("---")
                    st.markdown("**üß™ Testar Configura√ß√µes**")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        email_teste = st.text_input(
                            "Email para teste:",
                            value=obter_configuracao("email_teste", ""),
                            placeholder="seu@email.com",
                            help="Digite um email para receber um teste"
                        )
                    
                    with col2:
                        if st.button("üìß Enviar Email Teste", type="secondary"):
                            if email_teste and email_sistema and senha_email:
                                # Salvar o email de teste
                                salvar_configuracao("email_teste", email_teste)
                                
                                # Tentar envio manual (sem chamar fun√ß√£o externa)
                                try:
                                    import smtplib
                                    from email.mime.text import MIMEText
                                    from email.mime.multipart import MIMEMultipart
                                    
                                    # Criar mensagem de teste
                                    msg = MIMEMultipart()
                                    msg['From'] = email_sistema
                                    msg['To'] = email_teste
                                    msg['Subject'] = f"üß™ Teste de Email - {nome_profissional}"
                                    
                                    corpo = f"""
Ol√°!

Este √© um email de teste do sistema de agendamento.

‚úÖ Configura√ß√µes funcionando corretamente!

üìß Email do sistema: {email_sistema}
üè• Cl√≠nica: {nome_clinica}
üë®‚Äç‚öïÔ∏è Profissional: {nome_profissional}

Se voc√™ recebeu este email, significa que as configura√ß√µes SMTP est√£o corretas.

Atenciosamente,
Sistema de Agendamento Online
"""
                                    
                                    msg.attach(MIMEText(corpo, 'plain', 'utf-8'))
                                    
                                    # Enviar email
                                    server = smtplib.SMTP(servidor_smtp, porta_smtp)
                                    server.starttls()
                                    server.login(email_sistema, senha_email)
                                    server.send_message(msg)
                                    server.quit()
                                    
                                    st.success("‚úÖ Email de teste enviado com sucesso!")
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Erro ao enviar email: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è Preencha o email de teste e configure o sistema primeiro")
   
                    
                    # Se√ß√£o Google Calendar
                    st.markdown("---")
                    st.markdown("**üìÖ Integra√ß√£o Google Calendar**")
                    
                    google_calendar_ativo = st.checkbox(
                        "Ativar sincroniza√ß√£o com Google Calendar",
                        value=obter_configuracao("google_calendar_ativo", False),
                        help="Sincroniza automaticamente agendamentos confirmados com seu Google Calendar"
                    )
                    
                    if google_calendar_ativo:
                        st.success("‚úÖ Google Calendar ativado - agendamentos ser√£o sincronizados automaticamente!")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.info("""
                            **üìã Como funciona:**
                            ‚Ä¢ Agendamento confirmado ‚Üí Cria evento
                            ‚Ä¢ Agendamento cancelado ‚Üí Remove evento  
                            ‚Ä¢ Agendamento atendido ‚Üí Marca como conclu√≠do
                            """)
                        
                        with col2:

                            if st.button("üß™ Testar Conex√£o Google Calendar", key="test_google_calendar"):
                                try:
                                    st.write("üîç Testando imports...")
                                    
                                    # Teste de import direto
                                    import importlib
                                    
                                    # Testar cada biblioteca individualmente
                                    try:
                                        google_auth = importlib.import_module('google.auth')
                                        st.write("‚úÖ google.auth OK")
                                    except ImportError as e:
                                        st.error(f"‚ùå google.auth: {e}")
                                        
                                    try:
                                        google_oauth2 = importlib.import_module('google.oauth2.credentials')
                                        st.write("‚úÖ google.oauth2.credentials OK")
                                    except ImportError as e:
                                        st.error(f"‚ùå google.oauth2.credentials: {e}")
                                        
                                    try:
                                        googleapiclient = importlib.import_module('googleapiclient.discovery')
                                        st.write("‚úÖ googleapiclient.discovery OK")
                                    except ImportError as e:
                                        st.error(f"‚ùå googleapiclient.discovery: {e}")
                                        
                                    st.info("üìù Se algum import falhou, o problema √© falta de bibliotecas no requirements.txt")
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Erro geral: {e}")

                                with st.spinner("Testando conex√£o..."):
                                    try:
                                        service = get_google_calendar_service()
                                        if service:
                                            # Testar listando calend√°rios
                                            calendars = service.calendarList().list().execute()
                                            st.success("‚úÖ Conex√£o com Google Calendar funcionando!")
                                            
                                            # Mostrar calend√°rios dispon√≠veis
                                            with st.expander("üìÖ Calend√°rios dispon√≠veis"):
                                                for calendar in calendars.get('items', []):
                                                    if calendar['id'] == 'primary':
                                                        st.write(f"üìã **{calendar['summary']}** (Principal) ‚≠ê")
                                                    else:
                                                        st.write(f"üìã **{calendar['summary']}**")
                                                        
                                        else:
                                            st.error("‚ùå N√£o foi poss√≠vel conectar. Verifique as credenciais nos Secrets.")
                                    except Exception as e:
                                        st.error(f"‚ùå Erro na conex√£o: {str(e)}")
                    else:
                        st.info("üí° Ative a sincroniza√ß√£o para ter seus agendamentos automaticamente no Google Calendar!")
                        
                        st.markdown("""
                        **üîß Configura√ß√£o necess√°ria:**
                        
                        Configure nos **Streamlit Secrets**:
                        - `GOOGLE_CLIENT_ID`
                        - `GOOGLE_CLIENT_SECRET` 
                        - `GOOGLE_REFRESH_TOKEN`
                        - `GOOGLE_CALENDAR_ID` (opcional, padr√£o: "primary")
                        """)
                    
                    # Se√ß√£o de backup GitHub (manter como est√°)
                    st.markdown("---")
                    st.markdown("**‚òÅÔ∏è Backup de Configura√ß√µes**")   
                
                    # Se√ß√£o de backup GitHub (ADICIONAR DEPOIS da se√ß√£o de teste de email)
                    st.markdown("---")
                    st.markdown("**‚òÅÔ∏è Backup de Configura√ß√µes**")
                    
                    backup_github_ativo = st.checkbox(
                        "Ativar backup autom√°tico no GitHub",
                        value=obter_configuracao("backup_github_ativo", False),
                        help="Salva automaticamente suas configura√ß√µes em reposit√≥rio GitHub privado"
                    )
                    
                    if backup_github_ativo:
                        st.success("‚úÖ Backup autom√°tico ativado - suas configura√ß√µes ser√£o salvas automaticamente!")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            if st.button("üíæ Fazer Backup Manual", type="secondary"):
                                with st.spinner("Enviando backup para GitHub..."):
                                    try:
                                        if backup_configuracoes_github():
                                            st.success("‚úÖ Backup enviado com sucesso!")
                                            st.info("üîó Confira em: https://github.com/psrs2000/Agenda_Livre")
                                        else:
                                            st.error("‚ùå Erro no backup. Verifique as configura√ß√µes.")
                                    except Exception as e:
                                        st.error(f"‚ùå Erro: {e}")
                        
                        with col2:
                            # Mostrar √∫ltima data de backup se dispon√≠vel
                            ultima_config = obter_configuracao("_backup_timestamp", "")
                            if ultima_config:
                                try:
                                    from datetime import datetime
                                    data_backup = datetime.fromisoformat(ultima_config)
                                    data_formatada = data_backup.strftime("%d/%m/%Y √†s %H:%M")
                                    st.info(f"üìÖ √öltimo backup: {data_formatada}")
                                except:
                                    st.info("üìÖ Backup dispon√≠vel no GitHub")
                            else:
                                st.info("üìÖ Primeiro backup ser√° feito automaticamente")
                    
                    else:
                        st.info("üí° Ative o backup autom√°tico para nunca perder suas configura√ß√µes quando o Streamlit reiniciar!")
                        
                        # Bot√£o para fazer backup mesmo com fun√ß√£o desativada
                        if st.button("üíæ Fazer Backup √önico", help="Fazer backup sem ativar fun√ß√£o autom√°tica"):
                            with st.spinner("Enviando backup..."):
                                try:
                                    if backup_configuracoes_github():
                                        st.success("‚úÖ Backup enviado com sucesso!")
                                        st.info("üîó Confira em: https://github.com/psrs2000/Agenda_Livre")
                                    else:
                                        st.error("‚ùå Erro no backup. Verifique token GitHub.")
                                except Exception as e:
                                    st.error(f"‚ùå Erro: {e}")
                
                else:
                    st.info("üìß Sistema de email desativado. Ative acima para configurar o envio autom√°tico.")            
            # Bot√£o para salvar todas as configura√ß√µes
            st.markdown("---")
            if st.button("üíæ Salvar Todas as Configura√ß√µes", type="primary", use_container_width=True):
                # Salvar configura√ß√µes da tab 1
                salvar_configuracao("dias_futuros", dias_futuros)
                salvar_configuracao("antecedencia_minima", antecedencia_opcoes[antecedencia_selecionada])
                salvar_configuracao("horario_inicio", horario_inicio.strftime("%H:%M"))
                salvar_configuracao("horario_fim", horario_fim.strftime("%H:%M"))
                salvar_configuracao("intervalo_consultas", intervalo_opcoes[intervalo_selecionado])
                salvar_configuracao("confirmacao_automatica", confirmacao_automatica)
                                
                # Salvar configura√ß√µes da tab 2
                salvar_configuracao("nome_profissional", nome_profissional)
                salvar_configuracao("especialidade", especialidade)
                salvar_configuracao("registro_profissional", registro_profissional)
                salvar_configuracao("nome_clinica", nome_clinica)
                salvar_configuracao("telefone_contato", telefone_contato)
                salvar_configuracao("whatsapp", whatsapp)
                salvar_configuracao("endereco_rua", endereco_rua)
                salvar_configuracao("endereco_bairro", endereco_bairro)
                salvar_configuracao("endereco_cidade", endereco_cidade)
                salvar_configuracao("instrucoes_chegada", instrucoes_chegada)
                
                # Salvar configura√ß√µes da tab 3
                salvar_configuracao("envio_automatico", envio_automatico)
                salvar_configuracao("google_calendar_ativo", google_calendar_ativo)
                salvar_configuracao("email_teste", email_teste if envio_automatico else "")
                if envio_automatico:
                    salvar_configuracao("email_sistema", email_sistema)
                    salvar_configuracao("senha_email", senha_email)
                    salvar_configuracao("servidor_smtp", servidor_smtp)
                    salvar_configuracao("porta_smtp", porta_smtp)
                    salvar_configuracao("enviar_confirmacao", enviar_confirmacao)
                    salvar_configuracao("enviar_cancelamento", enviar_cancelamento)
                    salvar_configuracao("template_confirmacao", template_confirmacao)
                
                # NOVO: Salvar configura√ß√£o de backup GitHub
                salvar_configuracao("backup_github_ativo", backup_github_ativo)
                
                st.success("‚úÖ Todas as configura√ß√µes foram salvas com sucesso!")
                
                # NOVO: Backup autom√°tico no GitHub (se ativado)
                if backup_github_ativo:
                    try:
                        with st.spinner("üì§ Fazendo backup no GitHub..."):
                            if backup_configuracoes_github():
                                st.success("‚òÅÔ∏è Backup autom√°tico enviado para GitHub!")
                            else:
                                st.warning("‚ö†Ô∏è Erro no backup autom√°tico. Configura√ß√µes salvas localmente.")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è Erro no backup autom√°tico: {e}")
                
                # Mostrar resumo
                st.markdown("**üìã Resumo das configura√ß√µes salvas:**")
                st.info(f"""
                üìÖ **Agendamento:** {intervalo_selecionado} de {horario_inicio.strftime('%H:%M')} √†s {horario_fim.strftime('%H:%M')}
                ‚è∞ **Anteced√™ncia:** {antecedencia_selecionada}
                üîÑ **Confirma√ß√£o:** {'Autom√°tica' if confirmacao_automatica else 'Manual'}
                üìß **Email:** {'Ativado' if envio_automatico else 'Desativado'}
                ‚òÅÔ∏è **Backup:** {'Ativado' if backup_github_ativo else 'Desativado'}
                üë®‚Äç‚öïÔ∏è **Profissional:** {nome_profissional} - {especialidade}
                üè• **Local:** {nome_clinica}
                """)
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        elif opcao == "üìÖ Configurar Agenda":
            st.markdown('<div class="main-card">', unsafe_allow_html=True)
            st.markdown('<div class="card-header"><h2 class="card-title">üìÖ Configura√ß√£o de Agenda</h2></div>', unsafe_allow_html=True)
            
            dias_pt = {"Monday": "Segunda-feira", "Tuesday": "Ter√ßa-feira", "Wednesday": "Quarta-feira", "Thursday": "Quinta-feira", "Friday": "Sexta-feira", "Saturday": "S√°bado", "Sunday": "Domingo"}
            dias_atuais = obter_dias_uteis()
            
            st.markdown("Selecione os dias da semana:")
            
            cols = st.columns(4)
            dias_selecionados = []
            
            for i, (dia_en, dia_pt) in enumerate(dias_pt.items()):
                with cols[i % 4]:
                    if st.checkbox(dia_pt, value=(dia_en in dias_atuais), key=f"dia_{dia_en}"):
                        dias_selecionados.append(dia_en)
            
            if st.button("üíæ Salvar Dias", type="primary", use_container_width=True):
                salvar_dias_uteis(dias_selecionados)
                st.success("‚úÖ Dias salvos!")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        elif opcao == "üóìÔ∏è Gerenciar Bloqueios":
                    st.markdown('<div class="main-card">', unsafe_allow_html=True)
                    st.markdown('<div class="card-header"><h2 class="card-title">üóìÔ∏è Gerenciar Bloqueios</h2></div>', unsafe_allow_html=True)
                    
                    # Tabs para diferentes tipos de bloqueio
                    tab1, tab2, tab3, tab4 = st.tabs(["üìÖ Dias Espec√≠ficos", "üìÜ Per√≠odos", "üïê Hor√°rios Espec√≠ficos", "‚è∞ Bloqueios Permanentes"])
                    
                    with tab1:
                        st.subheader("üìÖ Bloquear Dias Espec√≠ficos")
                        st.info("üí° Use esta op√ß√£o para bloquear poucos dias isolados (ex: feriados, faltas pontuais)")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**üìå Bloquear Data Individual**")
                            data_bloqueio = st.date_input("Data para bloquear:", min_value=datetime.today())
                            
                            if st.button("üö´ Bloquear Dia", type="primary", key="btn_bloquear_dia"):
                                if adicionar_bloqueio(data_bloqueio.strftime("%Y-%m-%d")):
                                    st.success("‚úÖ Dia bloqueado!")
                                    st.rerun()
                                else:
                                    st.warning("‚ö†Ô∏è Data j√° bloqueada.")
                        
                        with col2:
                            st.markdown("**‚ÑπÔ∏è Dias Espec√≠ficos vs Per√≠odos:**")
                            st.markdown("""
                            **üéØ Use "Dias Espec√≠ficos" para:**
                            ‚Ä¢ Feriados isolados
                            ‚Ä¢ Faltas pontuais  
                            ‚Ä¢ 1-3 dias n√£o consecutivos
                            
                            **üéØ Use "Per√≠odos" para:**
                            ‚Ä¢ F√©rias (v√°rios dias seguidos)
                            ‚Ä¢ Viagens longas
                            ‚Ä¢ Congressos/cursos
                            """)
                        
                        # Lista de datas bloqueadas (dias inteiros)
                        st.subheader("üö´ Dias Individuais Bloqueados")
                        bloqueios = obter_bloqueios()
                        
                        if bloqueios:
                            for data in bloqueios:
                                data_obj = datetime.strptime(data, "%Y-%m-%d")
                                data_formatada = data_obj.strftime("%d/%m/%Y - %A")
                                data_formatada = data_formatada.replace('Monday', 'Segunda-feira')\
                                    .replace('Tuesday', 'Ter√ßa-feira').replace('Wednesday', 'Quarta-feira')\
                                    .replace('Thursday', 'Quinta-feira').replace('Friday', 'Sexta-feira')\
                                    .replace('Saturday', 'S√°bado').replace('Sunday', 'Domingo')
                                
                                col_data, col_btn = st.columns([4, 1])
                                with col_data:
                                    st.markdown(f"""
                                    <div style="background: #fee2e2; border: 1px solid #fecaca; border-radius: 8px; padding: 1rem; margin: 0.5rem 0;">
                                        <span style="color: #991b1b; font-weight: 500;">üö´ {data_formatada}</span>
                                    </div>
                                    """, unsafe_allow_html=True)
                                with col_btn:
                                    if st.button("üóëÔ∏è", key=f"remove_dia_{data}", help="Remover bloqueio"):
                                        remover_bloqueio(data)
                                        st.rerun()
                        else:
                            st.info("üìÖ Nenhum dia individual bloqueado atualmente.")
                    
                    with tab2:
                        st.subheader("üìÜ Bloquear Per√≠odos")
                        st.info("üí° Use esta op√ß√£o para bloquear v√°rios dias consecutivos (ex: f√©rias, viagens)")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**‚ûï Criar Novo Per√≠odo Bloqueado**")
                            
                            data_inicio_periodo = st.date_input(
                                "Data inicial:", 
                                min_value=datetime.today().date(), 
                                key="periodo_inicio"
                            )

                            data_fim_periodo = st.date_input(
                                "Data final:", 
                                key="periodo_fim"
                            )

                            # Valida√ß√£o manual das datas
                            if data_inicio_periodo and data_fim_periodo:
                                if data_fim_periodo < data_inicio_periodo:
                                    st.error("‚ùå A data final deve ser posterior √† data inicial!")
                                    datas_validas = False
                                else:
                                    datas_validas = True
                            else:
                                datas_validas = False

                            descricao_periodo = st.text_input(
                                "Descri√ß√£o:",
                                placeholder="Ex: F√©rias de Janeiro, Viagem Europa, Congresso...",
                                key="desc_periodo"
                            )

                            if st.button("üö´ Bloquear Per√≠odo", type="primary", key="btn_bloquear_periodo_novo"):
                                if datas_validas:
                                    if descricao_periodo.strip():
                                        periodo_id = adicionar_bloqueio_periodo(
                                            data_inicio_periodo.strftime("%Y-%m-%d"),
                                            data_fim_periodo.strftime("%Y-%m-%d"),
                                            descricao_periodo
                                        )
                                        
                                        if periodo_id:
                                            dias_total = (data_fim_periodo - data_inicio_periodo).days + 1
                                            st.success(f"‚úÖ Per√≠odo bloqueado com sucesso! ({dias_total} dias)")
                                            st.rerun()
                                        else:
                                            st.error("‚ùå Erro ao bloquear per√≠odo.")
                                    else:
                                        st.warning("‚ö†Ô∏è Digite uma descri√ß√£o para o per√≠odo.")
                                else:
                                    st.warning("‚ö†Ô∏è Verifique se as datas est√£o corretas.")
                        
                        with col2:
                            st.markdown("**‚ÑπÔ∏è Vantagens dos Per√≠odos:**")
                            st.success("""
                            ‚úÖ **Organizado:** Um per√≠odo = uma linha na lista
                            ‚úÖ **F√°cil remo√ß√£o:** Exclui tudo de uma vez  
                            ‚úÖ **Visual limpo:** Sem polui√ß√£o na tela
                            ‚úÖ **Informativo:** Mostra status e dura√ß√£o
                            """)
                        
                        # Lista de per√≠odos bloqueados
                        st.markdown("---")
                        st.subheader("üìã Per√≠odos Bloqueados")
                        
                        periodos = obter_bloqueios_periodos()
                        
                        if periodos:
                            for periodo in periodos:
                                periodo_id, data_inicio, data_fim, descricao, criado_em = periodo
                                
                                # Calcular informa√ß√µes do per√≠odo
                                try:
                                    inicio_obj = datetime.strptime(data_inicio, "%Y-%m-%d")
                                    fim_obj = datetime.strptime(data_fim, "%Y-%m-%d")
                                    dias_total = (fim_obj - inicio_obj).days + 1
                                    
                                    inicio_formatado = inicio_obj.strftime("%d/%m/%Y")
                                    fim_formatado = fim_obj.strftime("%d/%m/%Y")
                                    
                                    # Verificar se per√≠odo j√° passou, est√° ativo ou √© futuro
                                    hoje = datetime.now().date()
                                    if fim_obj.date() < hoje:
                                        status_cor = "#6b7280"  # Cinza para passado
                                        status_texto = "Finalizado"
                                        status_icon = "‚úÖ"
                                    elif inicio_obj.date() <= hoje <= fim_obj.date():
                                        status_cor = "#f59e0b"  # Amarelo para ativo
                                        status_texto = "Ativo"
                                        status_icon = "üü°"
                                    else:
                                        status_cor = "#3b82f6"  # Azul para futuro
                                        status_texto = "Agendado"
                                        status_icon = "üìÖ"
                                    
                                except:
                                    inicio_formatado = data_inicio
                                    fim_formatado = data_fim
                                    dias_total = "?"
                                    status_cor = "#6b7280"
                                    status_texto = "Indefinido"
                                    status_icon = "‚ùì"
                                
                                col_info, col_btn = st.columns([5, 1])
                                
                                with col_info:
                                    st.markdown(f"""
                                    <div style="background: white; border-left: 4px solid {status_cor}; border-radius: 8px; padding: 1.5rem; margin: 1rem 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                            <h4 style="color: #1f2937; margin: 0; font-size: 1.1rem;">üìÜ {descricao}</h4>
                                            <span style="background: {status_cor}; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.8rem; font-weight: 600;">
                                                {status_icon} {status_texto}
                                            </span>
                                        </div>
                                        <div style="color: #374151; font-size: 0.95rem; line-height: 1.4;">
                                            <strong>üìÖ Per√≠odo:</strong> {inicio_formatado} at√© {fim_formatado}<br>
                                            <strong>üìä Dura√ß√£o:</strong> {dias_total} dia(s)
                                        </div>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                with col_btn:
                                    st.markdown("<br><br>", unsafe_allow_html=True)  # Espa√ßamento para alinhar
                                    if st.button("üóëÔ∏è", key=f"remove_periodo_{periodo_id}", help="Remover per√≠odo completo"):
                                        if remover_bloqueio_periodo(periodo_id):
                                            st.success(f"‚úÖ Per√≠odo '{descricao}' removido!")
                                            st.rerun()
                                        else:
                                            st.error("‚ùå Erro ao remover per√≠odo.")
                        else:
                            st.info("üìÖ Nenhum per√≠odo bloqueado.")
                    
                    with tab3:
                        st.subheader("üïê Bloquear Hor√°rios Espec√≠ficos")
                        
                        # Sub-abas para organizar melhor
                        subtab1, subtab2 = st.tabs(["üìÖ Por Data Espec√≠fica", "üìÜ Por Dia da Semana"])
                        
                        # =====================================================
                        # SUBTAB 1: BLOQUEIO POR DATA ESPEC√çFICA (c√≥digo atual)
                        # =====================================================
                        with subtab1:
                            st.markdown("**üìÖ Bloqueio para uma data espec√≠fica**")
                            
                            # Sele√ß√£o de data
                            data_horario = st.date_input("Selecionar data:", min_value=datetime.today(), key="data_horario_especifico")
                            data_horario_str = data_horario.strftime("%Y-%m-%d")
                            
                            # Obter configura√ß√µes de hor√°rios
                            horario_inicio_config = obter_configuracao("horario_inicio", "09:00")
                            horario_fim_config = obter_configuracao("horario_fim", "18:00")
                            intervalo_consultas = obter_configuracao("intervalo_consultas", 60)
                            
                            # Gerar hor√°rios poss√≠veis
                            try:
                                hora_inicio = datetime.strptime(horario_inicio_config, "%H:%M").time()
                                hora_fim = datetime.strptime(horario_fim_config, "%H:%M").time()
                                
                                inicio_min = hora_inicio.hour * 60 + hora_inicio.minute
                                fim_min = hora_fim.hour * 60 + hora_fim.minute
                                
                                horarios_possiveis = []
                                horario_atual = inicio_min
                                
                                while horario_atual + intervalo_consultas <= fim_min:
                                    h = horario_atual // 60
                                    m = horario_atual % 60
                                    horarios_possiveis.append(f"{str(h).zfill(2)}:{str(m).zfill(2)}")
                                    horario_atual += intervalo_consultas
                                    
                            except:
                                horarios_possiveis = [f"{str(h).zfill(2)}:00" for h in range(9, 18)]
                            
                            # Verificar quais hor√°rios j√° est√£o bloqueados
                            bloqueios_dia = obter_bloqueios_horarios()
                            horarios_bloqueados_dia = [h for d, h in bloqueios_dia if d == data_horario_str]
                            
                            st.markdown("**Selecione os hor√°rios que deseja bloquear:**")
                            
                            # Layout em colunas para os hor√°rios
                            cols = st.columns(4)
                            horarios_selecionados = []
                            
                            for i, horario in enumerate(horarios_possiveis):
                                with cols[i % 4]:
                                    ja_bloqueado = horario in horarios_bloqueados_dia
                                    if ja_bloqueado:
                                        st.markdown(f"""
                                        <div style="background: #fee2e2; border: 2px solid #ef4444; border-radius: 8px; padding: 8px; text-align: center; margin: 4px 0;">
                                            <span style="color: #991b1b; font-weight: 600;">üö´ {horario}</span><br>
                                            <small style="color: #991b1b;">Bloqueado</small>
                                        </div>
                                        """, unsafe_allow_html=True)
                                    else:
                                        if st.checkbox(f"üïê {horario}", key=f"horario_especifico_{horario}"):
                                            horarios_selecionados.append(horario)
                            
                            # Bot√µes de a√ß√£o
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                if st.button("üö´ Bloquear Hor√°rios Selecionados", type="primary", key="btn_bloquear_horarios_data"):
                                    if horarios_selecionados:
                                        bloqueados = 0
                                        for horario in horarios_selecionados:
                                            if adicionar_bloqueio_horario(data_horario_str, horario):
                                                bloqueados += 1
                                        
                                        if bloqueados > 0:
                                            st.success(f"‚úÖ {bloqueados} hor√°rio(s) bloqueado(s) com sucesso!")
                                            st.rerun()
                                        else:
                                            st.warning("‚ö†Ô∏è Hor√°rios j√° estavam bloqueados.")
                                    else:
                                        st.warning("‚ö†Ô∏è Selecione pelo menos um hor√°rio para bloquear.")
                            
                            with col2:
                                if st.button("üîì Desbloquear Todos os Hor√°rios do Dia", type="secondary", key="btn_desbloquear_dia_data"):
                                    if horarios_bloqueados_dia:
                                        for horario in horarios_bloqueados_dia:
                                            remover_bloqueio_horario(data_horario_str, horario)
                                        
                                        st.success(f"‚úÖ Todos os hor√°rios do dia {data_horario.strftime('%d/%m/%Y')} foram desbloqueados!")
                                        st.rerun()
                                    else:
                                        st.info("‚ÑπÔ∏è Nenhum hor√°rio bloqueado neste dia.")
                        
                        # =====================================================
                        # SUBTAB 2: BLOQUEIO POR DIA DA SEMANA (NOVO)
                        # =====================================================
                        with subtab2:
                            st.markdown("**üìÜ Bloqueio recorrente por dia da semana**")
                            st.info("üí° Configure hor√°rios que ficam sempre bloqueados em determinados dias da semana (ex: s√°bados das 12h √†s 18h)")
                            
                            # Sele√ß√£o do dia da semana
                            dias_opcoes = {
                                "Monday": "Segunda-feira",
                                "Tuesday": "Ter√ßa-feira", 
                                "Wednesday": "Quarta-feira",
                                "Thursday": "Quinta-feira",
                                "Friday": "Sexta-feira",
                                "Saturday": "S√°bado",
                                "Sunday": "Domingo"
                            }
                            
                            dia_semana_selecionado = st.selectbox(
                                "Selecione o dia da semana:",
                                list(dias_opcoes.keys()),
                                format_func=lambda x: dias_opcoes[x],
                                key="dia_semana_bloqueio"
                            )
                            
                            # Obter hor√°rios poss√≠veis (mesmo c√°lculo da outra aba)
                            horario_inicio_config = obter_configuracao("horario_inicio", "09:00")
                            horario_fim_config = obter_configuracao("horario_fim", "18:00")
                            intervalo_consultas = obter_configuracao("intervalo_consultas", 60)
                            
                            try:
                                hora_inicio = datetime.strptime(horario_inicio_config, "%H:%M").time()
                                hora_fim = datetime.strptime(horario_fim_config, "%H:%M").time()
                                
                                inicio_min = hora_inicio.hour * 60 + hora_inicio.minute
                                fim_min = hora_fim.hour * 60 + hora_fim.minute
                                
                                horarios_possiveis = []
                                horario_atual = inicio_min
                                
                                while horario_atual + intervalo_consultas <= fim_min:
                                    h = horario_atual // 60
                                    m = horario_atual % 60
                                    horarios_possiveis.append(f"{str(h).zfill(2)}:{str(m).zfill(2)}")
                                    horario_atual += intervalo_consultas
                                    
                            except:
                                horarios_possiveis = [f"{str(h).zfill(2)}:00" for h in range(9, 18)]
                            
                            st.markdown(f"**Selecione os hor√°rios para bloquear todas as {dias_opcoes[dia_semana_selecionado].lower()}:**")
                            
                            # Layout em colunas para os hor√°rios
                            cols = st.columns(4)
                            horarios_selecionados_semanal = []
                            
                            for i, horario in enumerate(horarios_possiveis):
                                with cols[i % 4]:
                                    if st.checkbox(f"üïê {horario}", key=f"horario_semanal_{horario}"):
                                        horarios_selecionados_semanal.append(horario)
                            
                            # Descri√ß√£o opcional
                            descricao_semanal = st.text_input(
                                "Descri√ß√£o (opcional):",
                                placeholder=f"Ex: {dias_opcoes[dia_semana_selecionado]} - meio per√≠odo",
                                key="desc_bloqueio_semanal"
                            )
                            
                            # Bot√£o para salvar bloqueio semanal
                            if st.button("üíæ Salvar Bloqueio Semanal", type="primary", key="btn_salvar_semanal"):
                                if horarios_selecionados_semanal:
                                    if adicionar_bloqueio_semanal(dia_semana_selecionado, horarios_selecionados_semanal, descricao_semanal):
                                        st.success(f"‚úÖ Bloqueio semanal para {dias_opcoes[dia_semana_selecionado]} criado com sucesso!")
                                        st.rerun()
                                    else:
                                        st.warning("‚ö†Ô∏è Esse bloqueio semanal j√° existe ou ocorreu um erro.")
                                else:
                                    st.warning("‚ö†Ô∏è Selecione pelo menos um hor√°rio para bloquear.")
                            
                            # Lista de bloqueios semanais existentes
                            st.markdown("---")
                            st.subheader("üìã Bloqueios Semanais Ativos")
                            
                            bloqueios_semanais = obter_bloqueios_semanais()
                            
                            if bloqueios_semanais:
                                for bloqueio in bloqueios_semanais:
                                    bloqueio_id, dia_semana, horarios_str, descricao = bloqueio
                                    
                                    horarios_lista = horarios_str.split(",")
                                    horarios_texto = ", ".join(horarios_lista)
                                    
                                    col1, col2 = st.columns([4, 1])
                                    
                                    with col1:
                                        st.markdown(f"""
                                        <div style="background: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 1rem; margin: 0.5rem 0;">
                                            <h4 style="color: #92400e; margin: 0 0 0.5rem 0;">üìÖ {dias_opcoes[dia_semana]}</h4>
                                            <p style="margin: 0; color: #92400e;">
                                                <strong>Hor√°rios bloqueados:</strong> {horarios_texto}<br>
                                                {f'<strong>Descri√ß√£o:</strong> {descricao}' if descricao else ''}
                                            </p>
                                        </div>
                                        """, unsafe_allow_html=True)
                                    
                                    with col2:
                                        if st.button("üóëÔ∏è", key=f"remove_semanal_{bloqueio_id}", help="Remover bloqueio semanal"):
                                            if remover_bloqueio_semanal(bloqueio_id):
                                                st.success("Bloqueio semanal removido!")
                                                st.rerun()
                            else:
                                st.info("üìÖ Nenhum bloqueio semanal configurado.")
                        
                        # Lista de hor√°rios bloqueados por data espec√≠fica
                        st.subheader("üïê Hor√°rios Espec√≠ficos Bloqueados")
                        bloqueios_horarios = obter_bloqueios_horarios()
                        
                        if bloqueios_horarios:
                            # Agrupar por data
                            bloqueios_por_data = {}
                            for data, horario in bloqueios_horarios:
                                if data not in bloqueios_por_data:
                                    bloqueios_por_data[data] = []
                                bloqueios_por_data[data].append(horario)
                            
                            for data, horarios in sorted(bloqueios_por_data.items()):
                                data_obj = datetime.strptime(data, "%Y-%m-%d")
                                data_formatada = data_obj.strftime("%d/%m/%Y - %A")
                                data_formatada = data_formatada.replace('Monday', 'Segunda-feira')\
                                    .replace('Tuesday', 'Ter√ßa-feira').replace('Wednesday', 'Quarta-feira')\
                                    .replace('Thursday', 'Quinta-feira').replace('Friday', 'Sexta-feira')\
                                    .replace('Saturday', 'S√°bado').replace('Sunday', 'Domingo')
                                
                                st.markdown(f"**üìÖ {data_formatada}**")
                                
                                # Mostrar hor√°rios bloqueados em colunas
                                cols = st.columns(6)
                                for i, horario in enumerate(sorted(horarios)):
                                    with cols[i % 6]:
                                        col1, col2 = st.columns([3, 1])
                                        with col1:
                                            st.markdown(f"üö´ **{horario}**")
                                        with col2:
                                            if st.button("üóëÔ∏è", key=f"remove_horario_{data}_{horario}", help="Remover bloqueio"):
                                                remover_bloqueio_horario(data, horario)
                                                st.rerun()
                                
                                st.markdown("---")
                        else:
                            st.info("üïê Nenhum hor√°rio espec√≠fico bloqueado atualmente.")
                    
                    with tab4:
                        st.subheader("‚è∞ Bloqueios Permanentes")
                        
                        st.markdown("""
                        <div style="background: #eff6ff; border: 1px solid #3b82f6; border-radius: 8px; padding: 1rem; margin: 1rem 0;">
                            ‚ÑπÔ∏è <strong>Bloqueios Permanentes:</strong><br>
                            Configure hor√°rios que ficam sempre bloqueados (ex: almo√ßo, intervalos, etc.)
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Formul√°rio para novo bloqueio
                        st.markdown("### ‚ûï Criar Novo Bloqueio Permanente")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            horario_inicio_perm = st.time_input("Hor√°rio de in√≠cio:", key="inicio_permanente")
                            
                        with col2:
                            horario_fim_perm = st.time_input("Hor√°rio de fim:", key="fim_permanente")
                        
                        # Sele√ß√£o de dias da semana
                        st.markdown("**Dias da semana:**")
                        
                        dias_opcoes = {
                            "Monday": "Segunda-feira",
                            "Tuesday": "Ter√ßa-feira", 
                            "Wednesday": "Quarta-feira",
                            "Thursday": "Quinta-feira",
                            "Friday": "Sexta-feira",
                            "Saturday": "S√°bado",
                            "Sunday": "Domingo"
                        }
                        
                        cols = st.columns(4)
                        dias_selecionados_perm = []
                        
                        for i, (dia_en, dia_pt) in enumerate(dias_opcoes.items()):
                            with cols[i % 4]:
                                if st.checkbox(dia_pt, key=f"dia_perm_{dia_en}"):
                                    dias_selecionados_perm.append(dia_en)
                        
                        # Descri√ß√£o
                        descricao_perm = st.text_input("Descri√ß√£o:", placeholder="Ex: Hor√°rio de Almo√ßo", key="desc_permanente")
                        
                        # Bot√£o para salvar
                        if st.button("üíæ Salvar Bloqueio Permanente", type="primary", key="btn_salvar_permanente"):
                            if horario_inicio_perm and horario_fim_perm and dias_selecionados_perm and descricao_perm:
                                if horario_fim_perm > horario_inicio_perm:
                                    inicio_str = horario_inicio_perm.strftime("%H:%M")
                                    fim_str = horario_fim_perm.strftime("%H:%M")
                                    
                                    if adicionar_bloqueio_permanente(inicio_str, fim_str, dias_selecionados_perm, descricao_perm):
                                        st.success("‚úÖ Bloqueio permanente criado com sucesso!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå Erro ao criar bloqueio.")
                                else:
                                    st.warning("‚ö†Ô∏è Hor√°rio de fim deve ser posterior ao hor√°rio de in√≠cio.")
                            else:
                                st.warning("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios.")
                        
                        # Lista de bloqueios permanentes existentes
                        st.markdown("---")
                        st.subheader("üìã Bloqueios Permanentes Ativos")
                        
                        bloqueios_permanentes = obter_bloqueios_permanentes()
                        
                        if bloqueios_permanentes:
                            for bloqueio in bloqueios_permanentes:
                                bloqueio_id, inicio, fim, dias, descricao = bloqueio
                                
                                # Converter dias de volta para portugu√™s
                                dias_lista = dias.split(",")
                                dias_pt = [dias_opcoes.get(dia, dia) for dia in dias_lista]
                                dias_texto = ", ".join(dias_pt)
                                
                                col1, col2 = st.columns([4, 1])
                                
                                with col1:
                                    st.markdown(f"""
                                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 1rem; margin: 0.5rem 0;">
                                        <h4 style="color: #856404; margin: 0 0 0.5rem 0;">‚è∞ {descricao}</h4>
                                        <p style="margin: 0; color: #856404;">
                                            <strong>Hor√°rio:</strong> {inicio} √†s {fim}<br>
                                            <strong>Dias:</strong> {dias_texto}
                                        </p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                with col2:
                                    if st.button("üóëÔ∏è", key=f"remove_perm_{bloqueio_id}", help="Remover bloqueio permanente"):
                                        if remover_bloqueio_permanente(bloqueio_id):
                                            st.success("Bloqueio removido!")
                                            st.rerun()
                        else:
                            st.info("üìÖ Nenhum bloqueio permanente configurado.")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
        
        elif opcao == "üë• Lista de Agendamentos":
            st.markdown('<div class="main-card fade-in">', unsafe_allow_html=True)
            st.markdown('<div class="card-header"><h2 class="card-title">üë• Lista de Agendamentos</h2></div>', unsafe_allow_html=True)
            
            # Bot√£o de exporta√ß√£o
            st.markdown("---")
            col_export, col_info = st.columns([2, 3])
            
            
            if agendamentos:
                # Filtros avan√ßados
                st.subheader("üîç Filtros e Busca")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    filtro_data = st.selectbox(
                        "üìÖ Per√≠odo:",
                        ["Todos", "Hoje", "Amanh√£", "Esta Semana", "Pr√≥ximos 7 dias", "Este M√™s", "Pr√≥ximo M√™s", "Per√≠odo Personalizado"],
                        help="Filtrar agendamentos por per√≠odo"
                    )
                
                with col2:
                    filtro_status = st.selectbox(
                        "üìä Status:", 
                        ["Todos", "Pendentes", "Confirmados", "Atendidos", "Cancelados"],
                        help="Filtrar por status do agendamento"
                    )
                
                with col3:
                    busca_nome = st.text_input(
                        "üë§ Buscar por nome:", 
                        placeholder="Digite o nome...",
                        help="Buscar agendamento por nome do cliente"
                    )
                
                with col4:
                    ordenacao = st.selectbox(
                        "üìã Ordenar por:",
                        ["Data (mais recente)", "Data (mais antiga)", "Nome (A-Z)", "Nome (Z-A)", "Status"],
                        help="Ordenar a lista de agendamentos"
                    )
                
                # Per√≠odo personalizado
                if filtro_data == "Per√≠odo Personalizado":
                    col1, col2 = st.columns(2)
                    with col1:
                        data_inicio_filtro = st.date_input("Data inicial:", value=datetime.today().date())
                    with col2:
                        data_fim_filtro = st.date_input("Data final:", value=datetime.today().date() + timedelta(days=30))
                
                # Aplicar filtros
                agendamentos_filtrados = agendamentos.copy()
                hoje = datetime.now().date()
                
                # Filtro por data
                if filtro_data == "Hoje":
                    agendamentos_filtrados = [a for a in agendamentos_filtrados if a[1] == hoje.strftime("%Y-%m-%d")]
                elif filtro_data == "Amanh√£":
                    amanha = hoje + timedelta(days=1)
                    agendamentos_filtrados = [a for a in agendamentos_filtrados if a[1] == amanha.strftime("%Y-%m-%d")]
                elif filtro_data == "Esta Semana":
                    inicio_semana = hoje - timedelta(days=hoje.weekday())
                    fim_semana = inicio_semana + timedelta(days=6)
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if inicio_semana <= datetime.strptime(a[1], "%Y-%m-%d").date() <= fim_semana]
                elif filtro_data == "Pr√≥ximos 7 dias":
                    proximos_7 = hoje + timedelta(days=7)
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if hoje <= datetime.strptime(a[1], "%Y-%m-%d").date() <= proximos_7]
                elif filtro_data == "Este M√™s":
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if a[1].startswith(hoje.strftime("%Y-%m"))]
                elif filtro_data == "Pr√≥ximo M√™s":
                    proximo_mes = (hoje.replace(day=1) + timedelta(days=32)).replace(day=1)
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if a[1].startswith(proximo_mes.strftime("%Y-%m"))]
                elif filtro_data == "Per√≠odo Personalizado":
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if data_inicio_filtro <= datetime.strptime(a[1], "%Y-%m-%d").date() <= data_fim_filtro]
                
                # Filtro por busca de nome
                if busca_nome:
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if busca_nome.lower() in a[3].lower()]
                
                # Filtro por status
                if filtro_status != "Todos":
                    status_map = {
                        "Pendentes": "pendente",
                        "Confirmados": "confirmado", 
                        "Atendidos": "atendido",
                        "Cancelados": "cancelado"
                    }
                    status_procurado = status_map[filtro_status]
                    agendamentos_filtrados = [a for a in agendamentos_filtrados 
                                            if len(a) > 6 and a[6] == status_procurado]
                
                # Aplicar ordena√ß√£o
                if ordenacao == "Data (mais recente)":
                    agendamentos_filtrados.sort(key=lambda x: (x[1], x[2]), reverse=True)
                elif ordenacao == "Data (mais antiga)":
                    agendamentos_filtrados.sort(key=lambda x: (x[1], x[2]))
                elif ordenacao == "Nome (A-Z)":
                    agendamentos_filtrados.sort(key=lambda x: x[3].lower())
                elif ordenacao == "Nome (Z-A)":
                    agendamentos_filtrados.sort(key=lambda x: x[3].lower(), reverse=True)
                elif ordenacao == "Status":
                    status_ordem = {"pendente": 1, "confirmado": 2, "atendido": 3, "cancelado": 4}
                    agendamentos_filtrados.sort(key=lambda x: status_ordem.get(x[6] if len(x) > 6 else "pendente", 5))
                
                # Estat√≠sticas dos filtros
                st.markdown("---")
                col1, col2, col3, col4 = st.columns(4)
                
                pendentes = len([a for a in agendamentos_filtrados if len(a) > 6 and a[6] == "pendente"])
                confirmados = len([a for a in agendamentos_filtrados if len(a) > 6 and a[6] == "confirmado"])
                atendidos = len([a for a in agendamentos_filtrados if len(a) > 6 and a[6] == "atendido"])
                cancelados = len([a for a in agendamentos_filtrados if len(a) > 6 and a[6] == "cancelado"])
                
                with col1:
                    st.metric("‚è≥ Pendentes", pendentes)
                with col2:
                    st.metric("‚úÖ Confirmados", confirmados)
                with col3:
                    st.metric("üéâ Atendidos", atendidos)
                with col4:
                    st.metric("‚ùå Cancelados", cancelados)
                
                st.markdown(f"**üìä Exibindo {len(agendamentos_filtrados)} de {len(agendamentos)} agendamento(s)**")
                
                # Lista de agendamentos com interface aprimorada
                st.markdown("---")
                st.subheader("üìã Agendamentos")
                
                if agendamentos_filtrados:
                    for agendamento in agendamentos_filtrados:
                        if len(agendamento) == 7:
                            agendamento_id, data, horario, nome, telefone, email, status = agendamento
                        elif len(agendamento) == 6:
                            agendamento_id, data, horario, nome, telefone, email = agendamento
                            status = "pendente"
                        else:
                            agendamento_id, data, horario, nome, telefone = agendamento
                            email = "N√£o informado"
                            status = "pendente"
                        
                        # Formatar data
                        data_obj = datetime.strptime(data, "%Y-%m-%d")
                        data_formatada = data_obj.strftime("%d/%m/%Y - %A")
                        data_formatada = data_formatada.replace('Monday', 'Segunda-feira')\
                            .replace('Tuesday', 'Ter√ßa-feira').replace('Wednesday', 'Quarta-feira')\
                            .replace('Thursday', 'Quinta-feira').replace('Friday', 'Sexta-feira')\
                            .replace('Saturday', 'S√°bado').replace('Sunday', 'Domingo')
                        
                        # Definir configura√ß√µes por status
                        status_config = {
                            'pendente': {
                                'icon': '‚è≥', 
                                'color': '#f59e0b', 
                                'bg_color': '#fef3c7',
                                'text': 'Aguardando Confirma√ß√£o',
                                'actions': ['confirm', 'reject']
                            },
                            'confirmado': {
                                'icon': '‚úÖ', 
                                'color': '#3b82f6', 
                                'bg_color': '#dbeafe',
                                'text': 'Confirmado',
                                'actions': ['attend', 'cancel']
                            },
                            'atendido': {
                                'icon': 'üéâ', 
                                'color': '#10b981', 
                                'bg_color': '#d1fae5',
                                'text': 'Atendido',
                                'actions': ['delete']
                            },
                            'cancelado': {
                                'icon': '‚ùå', 
                                'color': '#ef4444', 
                                'bg_color': '#fee2e2',
                                'text': 'Cancelado',
                                'actions': ['delete']
                            }
                        }
                        
                        config = status_config.get(status, status_config['pendente'])
                        
                        # Card do agendamento
                        col_info, col_actions = st.columns([4, 1])
                        
                        with col_info:
                            st.markdown(f"""
                            <div style="background: {config['bg_color']}; border-left: 4px solid {config['color']}; border-radius: 8px; padding: 1.5rem; margin: 1rem 0; transition: all 0.3s ease;">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                                    <div style="font-size: 1.3rem; font-weight: 700; color: #1f2937;">
                                        {config['icon']} {nome}
                                    </div>
                                    <div style="color: {config['color']}; font-weight: 600; font-size: 1.1rem;">
                                        üïê {horario}
                                    </div>
                                </div>
                                <div style="color: #374151; font-size: 1rem; line-height: 1.6;">
                                    üìÖ <strong>{data_formatada}</strong><br>
                                    üì± {telefone}<br>
                                    üìß {email}<br>
                                    <span style="background: {config['color']}; color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; text-transform: uppercase; margin-top: 8px; display: inline-block;">
                                        {config['text']}
                                    </span>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with col_actions:
                            st.markdown("<br>", unsafe_allow_html=True)  # Espa√ßamento
                            
                            # A√ß√µes baseadas no status
                            if 'confirm' in config['actions']:
                                if st.button("‚úÖ Confirmar", key=f"confirm_{agendamento_id}", help="Confirmar agendamento", use_container_width=True):
                                    atualizar_status_agendamento(agendamento_id, 'confirmado')
                                    st.success(f"‚úÖ Agendamento de {nome} confirmado!")
                                    st.rerun()
                            
                            if 'reject' in config['actions']:
                                if st.button("‚ùå Recusar", key=f"reject_{agendamento_id}", help="Recusar agendamento", use_container_width=True):
                                    atualizar_status_agendamento(agendamento_id, 'cancelado')
                                    st.success(f"‚ùå Agendamento de {nome} recusado!")
                                    st.rerun()
                            
                            if 'attend' in config['actions']:
                                if st.button("üéâ Atender", key=f"attend_{agendamento_id}", help="Marcar como atendido", use_container_width=True):
                                    atualizar_status_agendamento(agendamento_id, 'atendido')
                                    st.success(f"üéâ {nome} marcado como atendido!")
                                    st.rerun()
                            
                            if 'cancel' in config['actions']:
                                if st.button("‚ùå Cancelar", key=f"cancel_{agendamento_id}", help="Cancelar agendamento", use_container_width=True):
                                    atualizar_status_agendamento(agendamento_id, 'cancelado')
                                    st.success(f"‚ùå Agendamento de {nome} cancelado!")
                                    st.rerun()
                            
                            if 'delete' in config['actions']:
                                if st.button("üóëÔ∏è Excluir", key=f"delete_{agendamento_id}", help="Excluir registro", use_container_width=True):
                                    if st.session_state.get(f"confirm_delete_{agendamento_id}", False):
                                        deletar_agendamento(agendamento_id)
                                        st.success(f"üóëÔ∏è Registro de {nome} exclu√≠do!")
                                        st.rerun()
                                    else:
                                        st.session_state[f"confirm_delete_{agendamento_id}"] = True
                                        st.warning("‚ö†Ô∏è Clique novamente para confirmar")
                else:
                    st.info("üìÖ Nenhum agendamento encontrado com os filtros aplicados.")
                
                # A√ß√µes em lote
                if agendamentos_filtrados:
                    st.markdown("---")
                    st.subheader("‚ö° A√ß√µes em Lote")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("‚úÖ Confirmar Todos os Pendentes", help="Confirma todos os agendamentos pendentes da lista filtrada"):
                            pendentes_ids = [a[0] for a in agendamentos_filtrados if len(a) > 6 and a[6] == "pendente"]
                            for agendamento_id in pendentes_ids:
                                atualizar_status_agendamento(agendamento_id, 'confirmado')
                            if pendentes_ids:
                                st.success(f"‚úÖ {len(pendentes_ids)} agendamento(s) confirmado(s)!")
                                st.rerun()
                            else:
                                st.info("‚ÑπÔ∏è Nenhum agendamento pendente na lista atual.")
                    
                    with col2:
                        if st.button("üéâ Marcar Confirmados como Atendidos", help="Marca todos os confirmados como atendidos"):
                            confirmados_ids = [a[0] for a in agendamentos_filtrados if len(a) > 6 and a[6] == "confirmado"]
                            for agendamento_id in confirmados_ids:
                                atualizar_status_agendamento(agendamento_id, 'atendido')
                            if confirmados_ids:
                                st.success(f"üéâ {len(confirmados_ids)} agendamento(s) marcado(s) como atendido!")
                                st.rerun()
                            else:
                                st.info("‚ÑπÔ∏è Nenhum agendamento confirmado na lista atual.")
                    
                    with col3:
                        if st.button("üóëÔ∏è Limpar Cancelados Antigos", help="Remove registros cancelados com mais de 30 dias"):
                            data_limite = (hoje - timedelta(days=30)).strftime("%Y-%m-%d")
                            cancelados_antigos = [a[0] for a in agendamentos_filtrados 
                                                if len(a) > 6 and a[6] == "cancelado" and a[1] < data_limite]
                            for agendamento_id in cancelados_antigos:
                                deletar_agendamento(agendamento_id)
                            if cancelados_antigos:
                                st.success(f"üóëÔ∏è {len(cancelados_antigos)} registro(s) antigo(s) removido(s)!")
                                st.rerun()
                            else:
                                st.info("‚ÑπÔ∏è Nenhum cancelamento antigo para remover.")
                
            else:
                st.markdown("""
                <div style="background: #eff6ff; border: 1px solid #3b82f6; border-radius: 12px; padding: 2rem; text-align: center; margin: 2rem 0;">
                    <h3 style="color: #1d4ed8; margin-bottom: 1rem;">üìÖ Nenhum agendamento encontrado</h3>
                    <p style="color: #1e40af; margin-bottom: 1.5rem;">
                        Os agendamentos aparecer√£o aqui conforme forem sendo realizados pelos clientes.
                    </p>
                    <p style="color: #64748b; font-size: 0.9rem;">
                        üí° <strong>Dica:</strong> Compartilhe o link do sistema com seus clientes para come√ßar a receber agendamentos!
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown('</div>', unsafe_allow_html=True)

        elif opcao == "üíæ Backup & Restaura√ß√£o":
            st.markdown('<div class="main-card fade-in">', unsafe_allow_html=True)
            st.markdown('<div class="card-header"><h2 class="card-title">üíæ Backup & Restaura√ß√£o</h2></div>', unsafe_allow_html=True)
            
            # Informa√ß√µes gerais
            st.info("""
            üõ°Ô∏è **Centro de Backup e Restaura√ß√£o**
            
            Mantenha seus dados sempre seguros com nosso sistema completo de backup e restaura√ß√£o.
            Exporte seus agendamentos, configure backups autom√°ticos e restaure dados quando necess√°rio.
            """)
            
            # Separar em tabs para melhor organiza√ß√£o
            tab_export, tab_import, tab_auto = st.tabs(["üì§ Exportar Dados", "üì• Importar Dados", "üîÑ Backup Autom√°tico"])

            # ============================================
            # ABA 1: EXPORTAR DADOS
            # ============================================
            
            with tab_export:
                st.subheader("üì§ Exportar Agendamentos")
                
                col_info, col_action = st.columns([2, 1])
                
                with col_info:
                    st.markdown("""
                    **üìã O que ser√° exportado:**
                    ‚Ä¢ Todos os agendamentos (confirmados, pendentes, atendidos, cancelados)
                    ‚Ä¢ Informa√ß√µes completas: nome, telefone, email, data, hor√°rio, status
                    ‚Ä¢ Formato CSV compat√≠vel com Excel e outras planilhas
                    ‚Ä¢ Dados organizados cronologicamente
                    """)
                
                with col_action:
                    if st.button("üì• Gerar Backup CSV", 
                                type="primary",
                                use_container_width=True,
                                help="Baixar todos os agendamentos em formato CSV"):
                        
                        csv_data = exportar_agendamentos_csv()
                        
                        if csv_data:
                            # Gerar nome do arquivo com data atual
                            from datetime import datetime
                            data_atual = datetime.now().strftime("%Y%m%d_%H%M%S")
                            nome_arquivo = f"agendamentos_backup_{data_atual}.csv"
                            
                            # Estat√≠sticas
                            total_agendamentos = len(buscar_agendamentos())
                            tamanho_kb = len(csv_data.encode('utf-8')) / 1024
                            
                            st.success(f"‚úÖ Backup gerado com sucesso!")
                            
                            # M√©tricas do backup
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("üìä Total de Registros", total_agendamentos)
                            with col2:
                                st.metric("üìè Tamanho", f"{tamanho_kb:.1f} KB")
                            with col3:
                                st.metric("üìÖ Data/Hora", datetime.now().strftime("%d/%m %H:%M"))
                            
                            # Bot√£o de download
                            st.download_button(
                                label="‚¨áÔ∏è Baixar Arquivo de Backup",
                                data=csv_data,
                                file_name=nome_arquivo,
                                mime="text/csv",
                                use_container_width=True,
                                type="primary"
                            )
                            
                            st.info(f"üíæ **Arquivo:** {nome_arquivo}")
                            
                        else:
                            st.warning("‚ö†Ô∏è Nenhum agendamento encontrado para exportar")
                
                # Instru√ß√µes
                with st.expander("‚ÑπÔ∏è Como usar o arquivo de backup"):
                    st.markdown("""
                    **üìñ Instru√ß√µes de uso:**
                    
                    1. **üíæ Salvar arquivo:** Guarde o arquivo CSV em local seguro
                    2. **üìÅ Organiza√ß√£o:** Recomendamos criar uma pasta "Backups_Agendamento"
                    3. **üìä Abrir no Excel:** O arquivo abre diretamente no Excel ou Google Sheets
                    4. **üîÑ Restaurar:** Use a aba "Importar Dados" para restaurar os agendamentos
                    5. **‚è∞ Frequ√™ncia:** Recomendamos backup semanal ou antes de mudan√ßas importantes
                    
                    **üîí Seguran√ßa:**
                    ‚Ä¢ O arquivo cont√©m dados pessoais dos clientes
                    ‚Ä¢ Mantenha-o em local seguro e protegido
                    ‚Ä¢ N√£o compartilhe sem necessidade
                    """)
            
            # ============================================
            # ABA 2: IMPORTAR DADOS
            # ============================================
            
            with tab_import:
                st.subheader("üì• Restaurar Agendamentos")
                
                col_info_import, col_upload = st.columns([2, 3])

                with col_info_import:
                    st.markdown("""
                    **üìÇ Restaurar Backup:**
                    
                    ‚Ä¢ Importe um arquivo CSV exportado anteriormente
                    ‚Ä¢ Formato deve ser id√™ntico ao exportado
                    ‚Ä¢ Duplicatas ser√£o ignoradas automaticamente
                    ‚Ä¢ Colunas obrigat√≥rias: ID, Data, Hor√°rio, Nome, Telefone
                    """)
                    
                    st.warning("""
                    ‚ö†Ô∏è **Aten√ß√£o:**
                    Esta opera√ß√£o ir√° adicionar os agendamentos do arquivo ao sistema atual.
                    Agendamentos duplicados ser√£o ignorados automaticamente.
                    """)

                with col_upload:
                    uploaded_file = st.file_uploader(
                        "Escolha um arquivo CSV de backup:",
                        type=['csv'],
                        help="Selecione um arquivo CSV exportado anteriormente do sistema"
                    )
                    
                    if uploaded_file is not None:
                        # Mostrar informa√ß√µes do arquivo
                        file_size = uploaded_file.size
                        st.info(f"üìÑ **Arquivo:** {uploaded_file.name} ({file_size} bytes)")
                        
                        if st.button("üì§ Restaurar Dados do Backup", 
                                    type="primary", 
                                    use_container_width=True):
                            
                            # Ler conte√∫do do arquivo
                            csv_content = uploaded_file.getvalue().decode('utf-8')
                            
                            # Importar dados
                            resultado = importar_agendamentos_csv(csv_content)
                            
                            if resultado['sucesso']:
                                st.success("üéâ Restaura√ß√£o realizada com sucesso!")
                                
                                # Mostrar estat√≠sticas sem colunas aninhadas
                                if resultado['importados'] > 0:
                                    st.info(f"‚úÖ **{resultado['importados']}** agendamento(s) restaurado(s)")
                                
                                if resultado['duplicados'] > 0:
                                    st.warning(f"‚ö†Ô∏è **{resultado['duplicados']}** registro(s) j√° existiam (ignorados)")
                                
                                if resultado['erros'] > 0:
                                    st.error(f"‚ùå **{resultado['erros']}** registro(s) com erro nos dados")
                                
                                # Atualizar a p√°gina para mostrar os novos dados
                                if resultado['importados'] > 0:
                                    st.balloons()
                                    st.rerun()
                                    
                            else:
                                st.error(f"‚ùå Erro na restaura√ß√£o: {resultado.get('erro', 'Erro desconhecido')}")
                
                # Formato esperado
                with st.expander("üìã Formato esperado do arquivo CSV"):
                    st.code("""
        ID,Data,Hor√°rio,Nome,Telefone,Email,Status
        1,2024-12-20,09:00,Jo√£o Silva,(11) 99999-9999,joao@email.com,confirmado
        2,2024-12-20,10:00,Maria Santos,(11) 88888-8888,maria@email.com,pendente
        3,2024-12-21,14:00,Pedro Costa,(11) 77777-7777,pedro@email.com,atendido
                    """, language="csv")
                    
                    st.markdown("""
                    **üìù Observa√ß√µes importantes:**
                    - Use exatamente os mesmos cabe√ßalhos mostrados acima
                    - Formato de data: AAAA-MM-DD (ex: 2024-12-20)
                    - Formato de hor√°rio: HH:MM (ex: 09:00)
                    - Status v√°lidos: pendente, confirmado, atendido, cancelado
                    - Email √© opcional (pode ficar em branco)
                    - ID ser√° ignorado (sistema gera automaticamente)
                    """)
            
            # ============================================
            # ABA 3: BACKUP AUTOM√ÅTICO (placeholder)
            # ============================================
            
            with tab_auto:
                interface_backup_email()

            st.markdown('</div>', unsafe_allow_html=True)

else:
    # INTERFACE DO CLIENTE
    # Obter configura√ß√µes din√¢micas atualizadas
    nome_profissional = obter_configuracao("nome_profissional", "Dr. Jo√£o Silva")
    especialidade = obter_configuracao("especialidade", "Cl√≠nico Geral")
    nome_clinica = obter_configuracao("nome_clinica", "Cl√≠nica S√£o Lucas")
    telefone_contato = obter_configuracao("telefone_contato", "(11) 3333-4444")
    whatsapp = obter_configuracao("whatsapp", "(11) 99999-9999")
    
    # Endere√ßo completo
    endereco_rua = obter_configuracao("endereco_rua", "Rua das Flores, 123")
    endereco_bairro = obter_configuracao("endereco_bairro", "Centro")
    endereco_cidade = obter_configuracao("endereco_cidade", "S√£o Paulo - SP")
    endereco_completo = f"{endereco_rua}, {endereco_bairro}, {endereco_cidade}"
    
    instrucoes_chegada = obter_configuracao("instrucoes_chegada", "Favor chegar 10 minutos antes do hor√°rio agendado.")

    st.markdown(f"""
    <div class="main-header">
        <h1>‚è≥ Agendamento Online</h1>
        <p>Agende seu hor√°rio com {nome_profissional} - {especialidade}</p>
    </div>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown('<div class="main-card">', unsafe_allow_html=True)
        
        tab_agendar, tab_cancelar = st.tabs(["üìÖ Agendar Hor√°rio", "‚ùå Cancelar Agendamento"])
        
        with tab_agendar:
            # Obter configura√ß√µes din√¢micas para agendamento
            hoje = datetime.today()
            dias_futuros_config = obter_configuracao("dias_futuros", 30)
            antecedencia_minima = obter_configuracao("antecedencia_minima", 2)
            horario_inicio = obter_configuracao("horario_inicio", "09:00")
            horario_fim = obter_configuracao("horario_fim", "18:00")
            intervalo_consultas = obter_configuracao("intervalo_consultas", 60)  # AGORA USA A CONFIGURA√á√ÉO!
            
            dias_uteis = obter_dias_uteis()
            datas_bloqueadas = obter_datas_bloqueadas()
            datas_bloqueadas_dt = [datetime.strptime(d, "%Y-%m-%d").date() for d in datas_bloqueadas]
            
            agora = datetime.now()
            data_limite_antecedencia = agora + timedelta(hours=antecedencia_minima)
            
            datas_validas = []
            for i in range(1, dias_futuros_config + 1):
                data = hoje + timedelta(days=i)
                dia_semana = data.strftime("%A")
                data_str = data.strftime("%Y-%m-%d")  # Formato para verificar per√≠odos
                
                # Verificar todas as condi√ß√µes:
                # 1. Dia da semana permitido
                # 2. N√£o est√° na lista de bloqueios individuais  
                # 3. N√£o est√° em nenhum per√≠odo bloqueado
                # 4. Respeita anteced√™ncia m√≠nima
                if (dia_semana in dias_uteis and 
                    data.date() not in datas_bloqueadas_dt and 
                    not data_em_periodo_bloqueado(data_str) and  # NOVA VERIFICA√á√ÉO!
                    data.date() > data_limite_antecedencia.date()):
                    datas_validas.append(data.date())
            
            if not datas_validas:
                st.warning("‚ö†Ô∏è Nenhuma data dispon√≠vel no momento.")
            else:
                st.subheader("üìã Dados do Cliente")
                
                nome = st.text_input("Nome completo *", placeholder="Digite seu nome")
                
                telefone = st.text_input("Telefone *", placeholder="(11) 99999-9999")
                
                email = st.text_input("E-mail *", placeholder="seu@email.com")
                
                st.subheader("üìÖ Escolha a Data")
                # Substitua a se√ß√£o do calend√°rio (a partir de "st.subheader("üìÖ Escolha a Data")") por este c√≥digo:

                
                # Inicializar estado do calend√°rio
                if 'data_selecionada_cal' not in st.session_state:
                    st.session_state.data_selecionada_cal = datas_validas[0] if datas_validas else None

                if 'mes_atual' not in st.session_state:
                    hoje = datetime.now()
                    st.session_state.mes_atual = hoje.month
                    st.session_state.ano_atual = hoje.year

                # Criar lista de meses dispon√≠veis
                meses_disponiveis = {}
                for data in datas_validas:
                    chave_mes = f"{data.year}-{data.month:02d}"
                    nome_mes = f"{calendar.month_name[data.month]} {data.year}"
                    if chave_mes not in meses_disponiveis:
                        meses_disponiveis[chave_mes] = nome_mes

                # Navega√ß√£o entre meses
                col_prev, col_mes, col_next = st.columns([1, 3, 1])

                with col_prev:
                    if st.button("‚óÄÔ∏è", key="prev_month", help="M√™s anterior"):
                        chave_atual = f"{st.session_state.ano_atual}-{st.session_state.mes_atual:02d}"
                        chaves_ordenadas = sorted(meses_disponiveis.keys())
                        try:
                            indice_atual = chaves_ordenadas.index(chave_atual)
                            if indice_atual > 0:
                                nova_chave = chaves_ordenadas[indice_atual - 1]
                                ano, mes = nova_chave.split("-")
                                st.session_state.ano_atual = int(ano)
                                st.session_state.mes_atual = int(mes)
                                st.rerun()
                        except ValueError:
                            pass

                with col_mes:
                    st.markdown(f"""
                    <div style="text-align: center; font-size: 1.1rem; font-weight: 600; color: #1f2937; padding: 0.5rem;">
                        üìÖ {calendar.month_name[st.session_state.mes_atual]} {st.session_state.ano_atual}
                    </div>
                    """, unsafe_allow_html=True)

                with col_next:
                    if st.button("‚ñ∂Ô∏è", key="next_month", help="Pr√≥ximo m√™s"):
                        chave_atual = f"{st.session_state.ano_atual}-{st.session_state.mes_atual:02d}"
                        chaves_ordenadas = sorted(meses_disponiveis.keys())
                        try:
                            indice_atual = chaves_ordenadas.index(chave_atual)
                            if indice_atual < len(chaves_ordenadas) - 1:
                                nova_chave = chaves_ordenadas[indice_atual + 1]
                                ano, mes = nova_chave.split("-")
                                st.session_state.ano_atual = int(ano)
                                st.session_state.mes_atual = int(mes)
                                st.rerun()
                        except ValueError:
                            pass

                # For√ßar colunas a n√£o empilhar usando CSS
                st.markdown("""
                <style>
                /* For√ßar TODAS as colunas do Streamlit a ficarem lado a lado no calend√°rio */
                div[data-testid="stHorizontalBlock"] {
                    display: flex !important;
                    flex-direction: row !important;
                    flex-wrap: nowrap !important;
                    gap: 2px !important;
                    width: 100% !important;
                }

                div[data-testid="stHorizontalBlock"] > div {
                    flex: 1 1 14.28% !important;
                    max-width: 14.28% !important;
                    min-width: 0 !important;
                    padding: 0 1px !important;
                }

                /* For√ßar tamb√©m pela classe */
                .row-widget.stColumns {
                    display: flex !important;
                    flex-direction: row !important;
                    flex-wrap: nowrap !important;
                    gap: 2px !important;
                    width: 100% !important;
                }

                .row-widget.stColumns > div {
                    flex: 1 1 14.28% !important;
                    max-width: 14.28% !important;
                    min-width: 0 !important;
                    padding: 0 1px !important;
                }

                /* Prevenir quebra em qualquer n√≠vel */
                div[data-testid="column"] {
                    flex: 1 1 14.28% !important;
                    max-width: 14.28% !important;
                    min-width: 0 !important;
                }

                /* Container do calend√°rio */
                .calendar-container {
                    width: 100%;
                    max-width: 400px;
                    margin: 1rem auto;
                    background: white;
                    border-radius: 12px;
                    padding: 0.5rem;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                }

                /* Ajustar bot√µes para serem menores em mobile */
                .stButton > button {
                    width: 100% !important;
                    padding: 0.25rem !important;
                    min-height: 2rem !important;
                    font-size: 0.8rem !important;
                    margin: 1px 0 !important;
                }

                /* Em telas muito pequenas, ajustar ainda mais */
                @media (max-width: 400px) {
                    .stButton > button {
                        font-size: 0.75rem !important;
                        padding: 0.2rem !important;
                        min-height: 1.8rem !important;
                    }
                    
                    .calendar-container {
                        padding: 0.3rem;
                    }
                }

                /* For√ßar layout horizontal mesmo em mobile */
                @media (max-width: 768px) {
                    div[data-testid="stHorizontalBlock"] {
                        display: flex !important;
                        flex-direction: row !important;
                    }
                    
                    div[data-testid="column"] {
                        flex: 1 1 14.28% !important;
                        max-width: 14.28% !important;
                    }
                }
                </style>
                """, unsafe_allow_html=True)

                # Container do calend√°rio
                st.markdown('<div class="calendar-container">', unsafe_allow_html=True)

                # Gerar calend√°rio do m√™s
                cal = calendar.monthcalendar(st.session_state.ano_atual, st.session_state.mes_atual)

                # Dias da semana - bem curtos para mobile
                st.markdown("""
                <div style="display: flex; gap: 2px; margin-bottom: 6px;">
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">SEG</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">TER</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">QUA</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">QUI</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">SEX</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">SAB</div>
                    <div style="flex: 1; text-align: center; font-size: 0.8rem; font-weight: 700; color: #374151; background: #f1f5f9; padding: 6px 3px; border-radius: 4px; border: 1px solid #e2e8f0;">DOM</div>
                </div>
                """, unsafe_allow_html=True)

                # Gerar cada semana do calend√°rio
                for semana_idx, semana in enumerate(cal):
                    cols = st.columns(7)
                    for dia_idx, dia in enumerate(semana):
                        with cols[dia_idx]:
                            if dia == 0:
                                # C√©lula vazia
                                st.markdown('<div style="height: 2rem;"></div>', unsafe_allow_html=True)
                            else:
                                # Verificar se data est√° dispon√≠vel
                                try:
                                    data_atual = datetime(st.session_state.ano_atual, st.session_state.mes_atual, dia).date()
                                    data_disponivel = data_atual in datas_validas
                                    data_selecionada_atual = st.session_state.data_selecionada_cal == data_atual
                                    
                                    if data_disponivel:
                                        # Data dispon√≠vel - bot√£o clic√°vel
                                        button_type = "primary" if data_selecionada_atual else "secondary"
                                        
                                        if st.button(
                                            str(dia),
                                            key=f"cal_{semana_idx}_{dia_idx}_{dia}",
                                            type=button_type,
                                            use_container_width=True
                                        ):
                                            st.session_state.data_selecionada_cal = data_atual
                                            st.rerun()
                                    else:
                                        # Data indispon√≠vel
                                        st.markdown(f"""
                                        <div style="
                                            height: 2rem; 
                                            display: flex; 
                                            align-items: center; 
                                            justify-content: center;
                                            color: #cbd5e1;
                                            font-size: 0.8rem;
                                        ">{dia}</div>
                                        """, unsafe_allow_html=True)
                                        
                                except ValueError:
                                    st.markdown('<div style="height: 2rem;"></div>', unsafe_allow_html=True)

                st.markdown('</div>', unsafe_allow_html=True)

                # Mostrar data selecionada
                if st.session_state.data_selecionada_cal:
                    data_formatada = st.session_state.data_selecionada_cal.strftime("%A, %d de %B de %Y").replace("Monday", "Segunda-feira")\
                        .replace("Tuesday", "Ter√ßa-feira").replace("Wednesday", "Quarta-feira")\
                        .replace("Thursday", "Quinta-feira").replace("Friday", "Sexta-feira")\
                        .replace("Saturday", "S√°bado").replace("Sunday", "Domingo")\
                        .replace("January", "Janeiro").replace("February", "Fevereiro").replace("March", "Mar√ßo")\
                        .replace("April", "Abril").replace("May", "Maio").replace("June", "Junho")\
                        .replace("July", "Julho").replace("August", "Agosto").replace("September", "Setembro")\
                        .replace("October", "Outubro").replace("November", "Novembro").replace("December", "Dezembro")
                    
                    st.success(f"üìÖ **Data selecionada:** {data_formatada}")

                # Definir data selecionada para o resto do c√≥digo
                data_selecionada = st.session_state.data_selecionada_cal
                
                if data_selecionada:
                    st.subheader("‚è∞ Hor√°rios Dispon√≠veis")
                    
                    data_str = data_selecionada.strftime("%Y-%m-%d")
                    
                    # Gerar hor√°rios baseados nas configura√ß√µes ATUALIZADAS
                    try:
                        hora_inicio = datetime.strptime(horario_inicio, "%H:%M").time()
                        hora_fim = datetime.strptime(horario_fim, "%H:%M").time()
                        
                        inicio_min = hora_inicio.hour * 60 + hora_inicio.minute
                        fim_min = hora_fim.hour * 60 + hora_fim.minute
                        
                        horarios_possiveis = []
                        horario_atual = inicio_min
                        
                        # USAR O INTERVALO CONFIGURADO!
                        while horario_atual + intervalo_consultas <= fim_min:
                            h = horario_atual // 60
                            m = horario_atual % 60
                            horarios_possiveis.append(f"{str(h).zfill(2)}:{str(m).zfill(2)}")
                            horario_atual += intervalo_consultas
                            
                    except:
                        horarios_possiveis = [f"{str(h).zfill(2)}:00" for h in range(9, 18)]
                    
                    horarios_disponiveis = [h for h in horarios_possiveis if horario_disponivel(data_str, h)]
                    
                    if horarios_disponiveis:
                        horario = st.selectbox("Escolha o hor√°rio:", horarios_disponiveis)
                        
                        if horario and nome and telefone and email:
                            email_valido = "@" in email and "." in email.split("@")[-1]
                            
                            if not email_valido:
                                st.warning("‚ö†Ô∏è Digite um e-mail v√°lido.")
                            else:
                                st.markdown(f"""
                                <div class="appointment-summary">
                                    <h3>üìã Resumo do Agendamento</h3>
                                    <div class="summary-item">
                                        <span>üë§ Nome:</span>
                                        <strong>{nome}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üì± Telefone:</span>
                                        <strong>{telefone}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üìß E-mail:</span>
                                        <strong>{email}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üìÖ Data:</span>
                                        <strong>{data_selecionada.strftime('%d/%m/%Y')}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>‚è∞ Hor√°rio:</span>
                                        <strong>{horario}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üë®‚Äç‚öïÔ∏è Profissional:</span>
                                        <strong>{nome_profissional}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üè• Local:</span>
                                        <strong>{nome_clinica}</strong>
                                    </div>
                                    <div class="summary-item">
                                        <span>üìç Endere√ßo:</span>
                                        <strong>{endereco_completo}</strong>
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                                
                                # Mostrar instru√ß√µes se existirem
                                if instrucoes_chegada:
                                    st.markdown(f"""
                                    <div style="background: #eff6ff; border-left: 4px solid #3b82f6; padding: 1rem; margin: 1rem 0; border-radius: 8px;">
                                        <strong>üìù Instru√ß√µes importantes:</strong><br>
                                        {instrucoes_chegada}
                                    </div>
                                    """, unsafe_allow_html=True)
                                
                                if st.button("‚úÖ Confirmar Agendamento", type="primary", use_container_width=True):
                                    try:
                                        status_inicial = adicionar_agendamento(nome, telefone, email, data_str, horario)
                                        
                                        if status_inicial == "confirmado":
                                            st.success("‚úÖ Agendamento confirmado automaticamente!")
                                        else:
                                            st.success("‚úÖ Agendamento solicitado! Aguarde confirma√ß√£o.")
                                        
                                        st.info(f"üí° Seu agendamento: {data_selecionada.strftime('%d/%m/%Y')} √†s {horario}")
                                        
                                        # Mostrar informa√ß√µes de contato
                                        st.markdown(f"""
                                        <div style="background: #ecfdf5; border-left: 4px solid #10b981; padding: 1rem; margin: 1rem 0; border-radius: 8px;">
                                            <strong>üìû Em caso de d√∫vidas:</strong><br>
                                            üì± Telefone: {telefone_contato}<br>
                                            üí¨ WhatsApp: {whatsapp}
                                        </div>
                                        """, unsafe_allow_html=True)
                                        
                                    except Exception as e:
                                        st.error(f"‚ùå Erro ao agendar: {str(e)}")
                        
                        elif nome or telefone or email:
                            campos_faltando = []
                            if not nome: campos_faltando.append("Nome")
                            if not telefone: campos_faltando.append("Telefone") 
                            if not email: campos_faltando.append("E-mail")
                            
                            if campos_faltando:
                                st.info(f"üìù Para continuar, preencha: {', '.join(campos_faltando)}")
                    else:
                        st.warning("‚ö†Ô∏è Nenhum hor√°rio dispon√≠vel para esta data.")
        
        with tab_cancelar:
            st.subheader("‚ùå Cancelar Agendamento")
            
            st.info("‚ÑπÔ∏è Informe os mesmos dados utilizados no agendamento.")
            
            nome_cancel = st.text_input(
                "Nome cadastrado:",
                placeholder="Digite o nome usado no agendamento",
                help="Informe exatamente o mesmo nome usado no agendamento"
            )
            
            telefone_cancel = st.text_input(
                "Telefone cadastrado:",
                placeholder="(11) 99999-9999",
                help="Informe exatamente o mesmo telefone usado no agendamento"
            )
            
            data_cancel = st.date_input(
                "Data do agendamento:",
                min_value=datetime.today().date(),
                help="Selecione a data do agendamento que deseja cancelar"
            )
            
            if st.button("üóëÔ∏è Cancelar Agendamento", type="secondary", use_container_width=True):
                if nome_cancel and telefone_cancel and data_cancel:
                    data_str = data_cancel.strftime("%Y-%m-%d")
                    sucesso = cancelar_agendamento(nome_cancel, telefone_cancel, data_str)
                    
                    if sucesso:
                        st.success("‚úÖ Agendamento cancelado com sucesso!")
                    else:
                        st.error("‚ùå Agendamento n√£o encontrado! Verifique os dados.")
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos.")
        
        st.markdown('</div>', unsafe_allow_html=True)

    # Footer din√¢mico com configura√ß√µes atualizadas
    st.markdown(f"""
    <div style="text-align: center; padding: 2rem; color: rgba(102, 126, 234, 0.8);">
        <h3 style="color: #1f2937; margin-bottom: 1rem;">{nome_profissional}</h3>
        <p style="color: #6b7280; margin-bottom: 0.5rem;"><strong>{especialidade}</strong></p>
        <p><strong>{nome_clinica}</strong></p>
        <p>üìç {endereco_completo}</p>
        <div style="margin: 1rem 0;">
            <p>üìû {telefone_contato} | üí¨ WhatsApp: {whatsapp}</p>
        </div>
        <hr style="margin: 1.5rem 0; border: none; height: 1px; background: #e9ecef;">
        <p>üí° <strong>Dica:</strong> Mantenha seus dados atualizados</p>
        <p style="font-size: 0.9rem; opacity: 0.7;">Sistema de Agendamento Online</p>
    </div>
    """, unsafe_allow_html=True)
